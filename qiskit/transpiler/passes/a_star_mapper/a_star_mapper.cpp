/* Generated by Cython 0.28.5 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "extra_compile_args": [
            "-w",
            "-O3",
            "-march=native",
            "-funroll-loops",
            "-mmacosx-version-min=10.9"
        ],
        "extra_link_args": [
            "-mmacosx-version-min=10.9"
        ],
        "language": "c++",
        "name": "a_star_mapper",
        "sources": [
            "a_star_mapper.pyx"
        ]
    },
    "module_name": "a_star_mapper"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_28_5"
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0; // PyThread_create_key reports success always
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif // TSS (Thread Specific Storage) API
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__a_star_mapper
#define __PYX_HAVE_API__a_star_mapper
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <queue>
#include <utility>
#include <set>
#include <string.h>
#include <stdlib.h>
#include <vector>
#include <stdio.h>
#include <limits.h>
#include <stdint.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "a_star_mapper.pyx",
  "stringsource",
};

/*--- Type declarations ---*/
struct __pyx_t_13a_star_mapper_a_star_node_mapper;
struct __pyx_t_13a_star_mapper_a_star_node_initial_mapping;
struct __pyx_t_13a_star_mapper_a_star_node_mapper {

  /* "a_star_mapper.pyx":40
 * 
 * # define class for nodes in the A* search
 * cdef cppclass a_star_node_mapper:             # <<<<<<<<<<<<<<
 *     int cost_fixed # fixed cost of the current permutation
 *     int cost_heur  # heuristic cost of the current permutation
 */
  int cost_fixed;
  int cost_heur;
  int *locations;
  int *qubits;
  bool is_goal;
  std::vector<std::pair<int,int> >  swaps;
};
struct __pyx_t_13a_star_mapper_a_star_node_initial_mapping {

  /* "a_star_mapper.pyx":170
 * 
 * # define class for nodes in the A* search
 * cdef cppclass a_star_node_initial_mapping:             # <<<<<<<<<<<<<<
 *     int cost_fixed # fixed cost of the current permutation
 *     int cost_heur  # heuristic cost of the current permutation
 */
  int cost_fixed;
  int cost_heur;
  int *locations;
  int *qubits;
  std::vector<std::pair<int,int> >  remaining_gates;
};

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.queue' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'libc.limits' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'cython' */

/* Module declarations from 'a_star_mapper' */
static int __pyx_f_13a_star_mapper_bfs(int, int **, std::set<std::pair<int,int> >  &); /*proto*/
static __pyx_t_13a_star_mapper_a_star_node_mapper *__pyx_f_13a_star_mapper_a_star_search(std::set<std::pair<int,int> >  &, int *, int *, int **, int, std::set<std::pair<int,int> >  &, std::set<std::pair<int,int> >  &); /*proto*/
static PyObject *__pyx_f_13a_star_mapper_add_rewritten_gates(PyObject *, int *, PyObject *); /*proto*/
static __pyx_t_13a_star_mapper_a_star_node_initial_mapping *__pyx_f_13a_star_mapper_find_initial_permutation(int, std::set<std::pair<int,int> > , int *, int **, std::set<std::pair<int,int> > ); /*proto*/
static std::pair<int,int>  __pyx_convert_pair_from_py_int__and_int(PyObject *); /*proto*/
static PyObject *__pyx_convert_pair_to_py_int____int(std::pair<int,int>  const &); /*proto*/
static PyObject *__pyx_convert_set_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(std::set<std::pair<int,int> >  const &); /*proto*/
#define __Pyx_MODULE_NAME "a_star_mapper"
extern int __pyx_module_is_main_a_star_mapper;
int __pyx_module_is_main_a_star_mapper = 0;

/* Implementation of 'a_star_mapper' */
static PyObject *__pyx_builtin_range;
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_q[] = "q";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_cx[] = "cx";
static const char __pyx_k_ii[] = "ii";
static const char __pyx_k_q0[] = "q0";
static const char __pyx_k_q1[] = "q1";
static const char __pyx_k_qq[] = "qq";
static const char __pyx_k_iii[] = "iii";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_dist[] = "dist";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_node[] = "node";
static const char __pyx_k_succ[] = "succ";
static const char __pyx_k_swap[] = "swap";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_cargs[] = "cargs";
static const char __pyx_k_gates[] = "gates";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_nodes[] = "nodes";
static const char __pyx_k_order[] = "order";
static const char __pyx_k_qargs[] = "qargs";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_degree[] = "degree";
static const char __pyx_k_min_q1[] = "min_q1";
static const char __pyx_k_min_q2[] = "min_q2";
static const char __pyx_k_params[] = "params";
static const char __pyx_k_qubits[] = "qubits";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_nqubits[] = "nqubits";
static const char __pyx_k_min_dist[] = "min_dist";
static const char __pyx_k_condition[] = "condition";
static const char __pyx_k_in_degree[] = "in_degree";
static const char __pyx_k_init_perm[] = "init_perm";
static const char __pyx_k_locations[] = "locations";
static const char __pyx_k_free_swaps[] = "free_swaps";
static const char __pyx_k_get_qubits[] = "get_qubits";
static const char __pyx_k_successors[] = "successors";
static const char __pyx_k_used_qubits[] = "used_qubits";
static const char __pyx_k_coupling_map[] = "coupling_map";
static const char __pyx_k_a_star_mapper[] = "a_star_mapper";
static const char __pyx_k_applied_gates[] = "applied_gates";
static const char __pyx_k_empty_circuit[] = "empty_circuit";
static const char __pyx_k_grouped_gates[] = "grouped_gates";
static const char __pyx_k_initial_gates[] = "initial_gates";
static const char __pyx_k_coupling_graph[] = "coupling_graph";
static const char __pyx_k_nodes_to_remove[] = "nodes_to_remove";
static const char __pyx_k_applicable_gates[] = "applicable_gates";
static const char __pyx_k_compiled_circuit[] = "compiled_circuit";
static const char __pyx_k_a_star_mapper_pyx[] = "a_star_mapper.pyx";
static const char __pyx_k_first_interaction[] = "first_interaction";
static const char __pyx_k_remove_nodes_from[] = "remove_nodes_from";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_apply_operation_back[] = "apply_operation_back";
static PyObject *__pyx_n_s_a_star_mapper;
static PyObject *__pyx_kp_s_a_star_mapper_pyx;
static PyObject *__pyx_n_s_applicable_gates;
static PyObject *__pyx_n_s_applied_gates;
static PyObject *__pyx_n_s_apply_operation_back;
static PyObject *__pyx_n_s_cargs;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_compiled_circuit;
static PyObject *__pyx_n_s_condition;
static PyObject *__pyx_n_s_coupling_graph;
static PyObject *__pyx_n_s_coupling_map;
static PyObject *__pyx_n_s_cx;
static PyObject *__pyx_n_s_degree;
static PyObject *__pyx_n_s_dist;
static PyObject *__pyx_n_s_empty_circuit;
static PyObject *__pyx_n_s_first_interaction;
static PyObject *__pyx_n_s_free_swaps;
static PyObject *__pyx_n_s_gates;
static PyObject *__pyx_n_s_get_qubits;
static PyObject *__pyx_n_s_grouped_gates;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_ii;
static PyObject *__pyx_n_s_iii;
static PyObject *__pyx_n_s_in_degree;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_init_perm;
static PyObject *__pyx_n_s_initial_gates;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_locations;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_min_dist;
static PyObject *__pyx_n_s_min_q1;
static PyObject *__pyx_n_s_min_q2;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_node;
static PyObject *__pyx_n_s_nodes;
static PyObject *__pyx_n_s_nodes_to_remove;
static PyObject *__pyx_n_s_nqubits;
static PyObject *__pyx_n_s_order;
static PyObject *__pyx_n_s_params;
static PyObject *__pyx_n_s_q;
static PyObject *__pyx_n_s_q0;
static PyObject *__pyx_n_s_q1;
static PyObject *__pyx_n_s_qargs;
static PyObject *__pyx_n_s_qq;
static PyObject *__pyx_n_s_qubits;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_remove_nodes_from;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_succ;
static PyObject *__pyx_n_s_successors;
static PyObject *__pyx_n_s_swap;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_used_qubits;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_pf_13a_star_mapper_a_star_mapper(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_grouped_gates, PyObject *__pyx_v_coupling_map, int __pyx_v_nqubits, PyObject *__pyx_v_empty_circuit); /* proto */
static PyObject *__pyx_int_0;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_codeobj__2;
/* Late includes */

/* "a_star_mapper.pyx":15
 * 
 * # breadth-first search algorithm to find minimal distances between physical qubits
 * cdef int bfs(int start, int** dist, set[pair[int, int] ]& coupling_graph):             # <<<<<<<<<<<<<<
 *     cdef queue[int] q
 *     cdef set[int] visited
 */

static int __pyx_f_13a_star_mapper_bfs(int __pyx_v_start, int **__pyx_v_dist, std::set<std::pair<int,int> >  &__pyx_v_coupling_graph) {
  std::queue<int>  __pyx_v_q;
  std::set<int>  __pyx_v_visited;
  int __pyx_v_v;
  std::pair<int,int>  __pyx_v_edge;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::set<std::pair<int,int> > ::iterator __pyx_t_2;
  std::pair<int,int>  __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("bfs", 0);

  /* "a_star_mapper.pyx":21
 *     cdef pair[int, int] edge
 * 
 *     visited.insert(start)             # <<<<<<<<<<<<<<
 *     q.push(start)
 *     dist[start][start] = 0
 */
  try {
    __pyx_v_visited.insert(__pyx_v_start);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 21, __pyx_L1_error)
  }

  /* "a_star_mapper.pyx":22
 * 
 *     visited.insert(start)
 *     q.push(start)             # <<<<<<<<<<<<<<
 *     dist[start][start] = 0
 * 
 */
  __pyx_v_q.push(__pyx_v_start);

  /* "a_star_mapper.pyx":23
 *     visited.insert(start)
 *     q.push(start)
 *     dist[start][start] = 0             # <<<<<<<<<<<<<<
 * 
 *     while not q.empty():
 */
  ((__pyx_v_dist[__pyx_v_start])[__pyx_v_start]) = 0;

  /* "a_star_mapper.pyx":25
 *     dist[start][start] = 0
 * 
 *     while not q.empty():             # <<<<<<<<<<<<<<
 *         v = q.front()
 *         q.pop();
 */
  while (1) {
    __pyx_t_1 = ((!(__pyx_v_q.empty() != 0)) != 0);
    if (!__pyx_t_1) break;

    /* "a_star_mapper.pyx":26
 * 
 *     while not q.empty():
 *         v = q.front()             # <<<<<<<<<<<<<<
 *         q.pop();
 *         for edge in coupling_graph:
 */
    __pyx_v_v = __pyx_v_q.front();

    /* "a_star_mapper.pyx":27
 *     while not q.empty():
 *         v = q.front()
 *         q.pop();             # <<<<<<<<<<<<<<
 *         for edge in coupling_graph:
 *             if edge.first == v and visited.find(edge.second) == visited.end():
 */
    __pyx_v_q.pop();

    /* "a_star_mapper.pyx":28
 *         v = q.front()
 *         q.pop();
 *         for edge in coupling_graph:             # <<<<<<<<<<<<<<
 *             if edge.first == v and visited.find(edge.second) == visited.end():
 *                 visited.insert(edge.second)
 */
    __pyx_t_2 = __pyx_v_coupling_graph.begin();
    for (;;) {
      if (!(__pyx_t_2 != __pyx_v_coupling_graph.end())) break;
      __pyx_t_3 = *__pyx_t_2;
      ++__pyx_t_2;
      __pyx_v_edge = __pyx_t_3;

      /* "a_star_mapper.pyx":29
 *         q.pop();
 *         for edge in coupling_graph:
 *             if edge.first == v and visited.find(edge.second) == visited.end():             # <<<<<<<<<<<<<<
 *                 visited.insert(edge.second)
 *                 q.push(edge.second)
 */
      __pyx_t_4 = ((__pyx_v_edge.first == __pyx_v_v) != 0);
      if (__pyx_t_4) {
      } else {
        __pyx_t_1 = __pyx_t_4;
        goto __pyx_L8_bool_binop_done;
      }
      __pyx_t_4 = ((__pyx_v_visited.find(__pyx_v_edge.second) == __pyx_v_visited.end()) != 0);
      __pyx_t_1 = __pyx_t_4;
      __pyx_L8_bool_binop_done:;
      if (__pyx_t_1) {

        /* "a_star_mapper.pyx":30
 *         for edge in coupling_graph:
 *             if edge.first == v and visited.find(edge.second) == visited.end():
 *                 visited.insert(edge.second)             # <<<<<<<<<<<<<<
 *                 q.push(edge.second)
 *                 dist[start][edge.second] = dist[start][v] + 1
 */
        try {
          __pyx_v_visited.insert(__pyx_v_edge.second);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 30, __pyx_L1_error)
        }

        /* "a_star_mapper.pyx":31
 *             if edge.first == v and visited.find(edge.second) == visited.end():
 *                 visited.insert(edge.second)
 *                 q.push(edge.second)             # <<<<<<<<<<<<<<
 *                 dist[start][edge.second] = dist[start][v] + 1
 *             elif edge.second == v and visited.find(edge.first) == visited.end():
 */
        __pyx_v_q.push(__pyx_v_edge.second);

        /* "a_star_mapper.pyx":32
 *                 visited.insert(edge.second)
 *                 q.push(edge.second)
 *                 dist[start][edge.second] = dist[start][v] + 1             # <<<<<<<<<<<<<<
 *             elif edge.second == v and visited.find(edge.first) == visited.end():
 *                 visited.insert(edge.first)
 */
        ((__pyx_v_dist[__pyx_v_start])[__pyx_v_edge.second]) = (((__pyx_v_dist[__pyx_v_start])[__pyx_v_v]) + 1);

        /* "a_star_mapper.pyx":29
 *         q.pop();
 *         for edge in coupling_graph:
 *             if edge.first == v and visited.find(edge.second) == visited.end():             # <<<<<<<<<<<<<<
 *                 visited.insert(edge.second)
 *                 q.push(edge.second)
 */
        goto __pyx_L7;
      }

      /* "a_star_mapper.pyx":33
 *                 q.push(edge.second)
 *                 dist[start][edge.second] = dist[start][v] + 1
 *             elif edge.second == v and visited.find(edge.first) == visited.end():             # <<<<<<<<<<<<<<
 *                 visited.insert(edge.first)
 *                 q.push(edge.first)
 */
      __pyx_t_4 = ((__pyx_v_edge.second == __pyx_v_v) != 0);
      if (__pyx_t_4) {
      } else {
        __pyx_t_1 = __pyx_t_4;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_4 = ((__pyx_v_visited.find(__pyx_v_edge.first) == __pyx_v_visited.end()) != 0);
      __pyx_t_1 = __pyx_t_4;
      __pyx_L10_bool_binop_done:;
      if (__pyx_t_1) {

        /* "a_star_mapper.pyx":34
 *                 dist[start][edge.second] = dist[start][v] + 1
 *             elif edge.second == v and visited.find(edge.first) == visited.end():
 *                 visited.insert(edge.first)             # <<<<<<<<<<<<<<
 *                 q.push(edge.first)
 *                 dist[start][edge.first] = dist[start][v] + 1
 */
        try {
          __pyx_v_visited.insert(__pyx_v_edge.first);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 34, __pyx_L1_error)
        }

        /* "a_star_mapper.pyx":35
 *             elif edge.second == v and visited.find(edge.first) == visited.end():
 *                 visited.insert(edge.first)
 *                 q.push(edge.first)             # <<<<<<<<<<<<<<
 *                 dist[start][edge.first] = dist[start][v] + 1
 * 
 */
        __pyx_v_q.push(__pyx_v_edge.first);

        /* "a_star_mapper.pyx":36
 *                 visited.insert(edge.first)
 *                 q.push(edge.first)
 *                 dist[start][edge.first] = dist[start][v] + 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
        ((__pyx_v_dist[__pyx_v_start])[__pyx_v_edge.first]) = (((__pyx_v_dist[__pyx_v_start])[__pyx_v_v]) + 1);

        /* "a_star_mapper.pyx":33
 *                 q.push(edge.second)
 *                 dist[start][edge.second] = dist[start][v] + 1
 *             elif edge.second == v and visited.find(edge.first) == visited.end():             # <<<<<<<<<<<<<<
 *                 visited.insert(edge.first)
 *                 q.push(edge.first)
 */
      }
      __pyx_L7:;

      /* "a_star_mapper.pyx":28
 *         v = q.front()
 *         q.pop();
 *         for edge in coupling_graph:             # <<<<<<<<<<<<<<
 *             if edge.first == v and visited.find(edge.second) == visited.end():
 *                 visited.insert(edge.second)
 */
    }
  }

  /* "a_star_mapper.pyx":15
 * 
 * # breadth-first search algorithm to find minimal distances between physical qubits
 * cdef int bfs(int start, int** dist, set[pair[int, int] ]& coupling_graph):             # <<<<<<<<<<<<<<
 *     cdef queue[int] q
 *     cdef set[int] visited
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("a_star_mapper.bfs", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "a_star_mapper.pyx":51
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef a_star_node_mapper* a_star_search(set[pair[int, int]]& gates, int* map, int* loc, int** dist, int nqubits, set[pair[int, int] ]& coupling_graph, set[pair[int, int]]& free_swaps) except + :             # <<<<<<<<<<<<<<
 *     cdef priority_queue[pair[int, uintptr_t]] q
 *     cdef a_star_node_mapper* current
 */

static __pyx_t_13a_star_mapper_a_star_node_mapper *__pyx_f_13a_star_mapper_a_star_search(std::set<std::pair<int,int> >  &__pyx_v_gates, int *__pyx_v_map, int *__pyx_v_loc, int **__pyx_v_dist, int __pyx_v_nqubits, std::set<std::pair<int,int> >  &__pyx_v_coupling_graph, std::set<std::pair<int,int> >  &__pyx_v_free_swaps) {
  std::priority_queue<std::pair<int,uintptr_t> >  __pyx_v_q;
  __pyx_t_13a_star_mapper_a_star_node_mapper *__pyx_v_current;
  __pyx_t_13a_star_mapper_a_star_node_mapper *__pyx_v_new_node;
  int __pyx_v_tmp_qubit1;
  int __pyx_v_tmp_qubit2;
  std::pair<int,int>  __pyx_v_g;
  std::pair<int,int>  __pyx_v_edge;
  std::set<int>  __pyx_v_used_qubits;
  std::set<int>  __pyx_v_interacted_qubits;
  __pyx_t_13a_star_mapper_a_star_node_mapper *__pyx_r;
  __Pyx_RefNannyDeclarations
  std::set<std::pair<int,int> > ::iterator __pyx_t_1;
  std::pair<int,int>  __pyx_t_2;
  __pyx_t_13a_star_mapper_a_star_node_mapper *__pyx_t_3;
  std::vector<std::pair<int,int> >  __pyx_t_4;
  std::pair<int,uintptr_t>  __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  std::vector<std::pair<int,int> > ::iterator __pyx_t_9;
  std::vector<std::pair<int,int> >  *__pyx_t_10;
  std::set<std::pair<int,int> > ::iterator __pyx_t_11;
  __Pyx_RefNannySetupContext("a_star_search", 0);

  /* "a_star_mapper.pyx":61
 * 
 *     # determine all qubits that occur in a 2-qubit gate that can be applied
 *     for g in gates:             # <<<<<<<<<<<<<<
 *         used_qubits.insert(g.first)
 *         used_qubits.insert(g.second)
 */
  __pyx_t_1 = __pyx_v_gates.begin();
  for (;;) {
    if (!(__pyx_t_1 != __pyx_v_gates.end())) break;
    __pyx_t_2 = *__pyx_t_1;
    ++__pyx_t_1;
    __pyx_v_g = __pyx_t_2;

    /* "a_star_mapper.pyx":62
 *     # determine all qubits that occur in a 2-qubit gate that can be applied
 *     for g in gates:
 *         used_qubits.insert(g.first)             # <<<<<<<<<<<<<<
 *         used_qubits.insert(g.second)
 * 
 */
    try {
      __pyx_v_used_qubits.insert(__pyx_v_g.first);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 62, __pyx_L1_error)
    }

    /* "a_star_mapper.pyx":63
 *     for g in gates:
 *         used_qubits.insert(g.first)
 *         used_qubits.insert(g.second)             # <<<<<<<<<<<<<<
 * 
 *     # create a new node representing the current mapping
 */
    try {
      __pyx_v_used_qubits.insert(__pyx_v_g.second);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 63, __pyx_L1_error)
    }

    /* "a_star_mapper.pyx":61
 * 
 *     # determine all qubits that occur in a 2-qubit gate that can be applied
 *     for g in gates:             # <<<<<<<<<<<<<<
 *         used_qubits.insert(g.first)
 *         used_qubits.insert(g.second)
 */
  }

  /* "a_star_mapper.pyx":66
 * 
 *     # create a new node representing the current mapping
 *     current = new a_star_node_mapper()             # <<<<<<<<<<<<<<
 *     current.cost_fixed = 0
 *     current.cost_heur = 0
 */
  try {
    __pyx_t_3 = new __pyx_t_13a_star_mapper_a_star_node_mapper();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 66, __pyx_L1_error)
  }
  __pyx_v_current = __pyx_t_3;

  /* "a_star_mapper.pyx":67
 *     # create a new node representing the current mapping
 *     current = new a_star_node_mapper()
 *     current.cost_fixed = 0             # <<<<<<<<<<<<<<
 *     current.cost_heur = 0
 *     current.qubits = <int*>malloc(nqubits * sizeof(int))
 */
  __pyx_v_current->cost_fixed = 0;

  /* "a_star_mapper.pyx":68
 *     current = new a_star_node_mapper()
 *     current.cost_fixed = 0
 *     current.cost_heur = 0             # <<<<<<<<<<<<<<
 *     current.qubits = <int*>malloc(nqubits * sizeof(int))
 *     current.locations = <int*>malloc(nqubits * sizeof(int))
 */
  __pyx_v_current->cost_heur = 0;

  /* "a_star_mapper.pyx":69
 *     current.cost_fixed = 0
 *     current.cost_heur = 0
 *     current.qubits = <int*>malloc(nqubits * sizeof(int))             # <<<<<<<<<<<<<<
 *     current.locations = <int*>malloc(nqubits * sizeof(int))
 *     memcpy(current.qubits, map, sizeof(int) * nqubits)
 */
  __pyx_v_current->qubits = ((int *)malloc((__pyx_v_nqubits * (sizeof(int)))));

  /* "a_star_mapper.pyx":70
 *     current.cost_heur = 0
 *     current.qubits = <int*>malloc(nqubits * sizeof(int))
 *     current.locations = <int*>malloc(nqubits * sizeof(int))             # <<<<<<<<<<<<<<
 *     memcpy(current.qubits, map, sizeof(int) * nqubits)
 *     memcpy(current.locations, loc, sizeof(int) * nqubits)
 */
  __pyx_v_current->locations = ((int *)malloc((__pyx_v_nqubits * (sizeof(int)))));

  /* "a_star_mapper.pyx":71
 *     current.qubits = <int*>malloc(nqubits * sizeof(int))
 *     current.locations = <int*>malloc(nqubits * sizeof(int))
 *     memcpy(current.qubits, map, sizeof(int) * nqubits)             # <<<<<<<<<<<<<<
 *     memcpy(current.locations, loc, sizeof(int) * nqubits)
 *     current.is_goal = False
 */
  (void)(memcpy(__pyx_v_current->qubits, __pyx_v_map, ((sizeof(int)) * __pyx_v_nqubits)));

  /* "a_star_mapper.pyx":72
 *     current.locations = <int*>malloc(nqubits * sizeof(int))
 *     memcpy(current.qubits, map, sizeof(int) * nqubits)
 *     memcpy(current.locations, loc, sizeof(int) * nqubits)             # <<<<<<<<<<<<<<
 *     current.is_goal = False
 *     current.swaps = vector[pair[int, int]]()
 */
  (void)(memcpy(__pyx_v_current->locations, __pyx_v_loc, ((sizeof(int)) * __pyx_v_nqubits)));

  /* "a_star_mapper.pyx":73
 *     memcpy(current.qubits, map, sizeof(int) * nqubits)
 *     memcpy(current.locations, loc, sizeof(int) * nqubits)
 *     current.is_goal = False             # <<<<<<<<<<<<<<
 *     current.swaps = vector[pair[int, int]]()
 * 
 */
  __pyx_v_current->is_goal = 0;

  /* "a_star_mapper.pyx":74
 *     memcpy(current.locations, loc, sizeof(int) * nqubits)
 *     current.is_goal = False
 *     current.swaps = vector[pair[int, int]]()             # <<<<<<<<<<<<<<
 * 
 *     q.push(pair[int, uintptr_t](current.cost_fixed + current.cost_heur, <uintptr_t>current))
 */
  try {
    __pyx_t_4 = std::vector<std::pair<int,int> > ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 74, __pyx_L1_error)
  }
  __pyx_v_current->swaps = __pyx_t_4;

  /* "a_star_mapper.pyx":76
 *     current.swaps = vector[pair[int, int]]()
 * 
 *     q.push(pair[int, uintptr_t](current.cost_fixed + current.cost_heur, <uintptr_t>current))             # <<<<<<<<<<<<<<
 * 
 *     # perform A* search
 */
  try {
    __pyx_t_5 = std::pair<int,uintptr_t> ((__pyx_v_current->cost_fixed + __pyx_v_current->cost_heur), ((uintptr_t)__pyx_v_current));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 76, __pyx_L1_error)
  }
  __pyx_v_q.push(__pyx_t_5);

  /* "a_star_mapper.pyx":79
 * 
 *     # perform A* search
 *     while not (<a_star_node_mapper*>q.top().second).is_goal:             # <<<<<<<<<<<<<<
 *         current = <a_star_node_mapper*> (q.top().second)
 *         q.pop()
 */
  while (1) {
    __pyx_t_6 = ((!(((__pyx_t_13a_star_mapper_a_star_node_mapper *)__pyx_v_q.top().second)->is_goal != 0)) != 0);
    if (!__pyx_t_6) break;

    /* "a_star_mapper.pyx":80
 *     # perform A* search
 *     while not (<a_star_node_mapper*>q.top().second).is_goal:
 *         current = <a_star_node_mapper*> (q.top().second)             # <<<<<<<<<<<<<<
 *         q.pop()
 * 
 */
    __pyx_v_current = ((__pyx_t_13a_star_mapper_a_star_node_mapper *)__pyx_v_q.top().second);

    /* "a_star_mapper.pyx":81
 *     while not (<a_star_node_mapper*>q.top().second).is_goal:
 *         current = <a_star_node_mapper*> (q.top().second)
 *         q.pop()             # <<<<<<<<<<<<<<
 * 
 *         # determine all successor nodes (one for each SWAP gate that can be applied)
 */
    __pyx_v_q.pop();

    /* "a_star_mapper.pyx":84
 * 
 *         # determine all successor nodes (one for each SWAP gate that can be applied)
 *         for edge in coupling_graph:             # <<<<<<<<<<<<<<
 *             # apply only SWAP operations including at least one qubit in used_qubits
 *             if used_qubits.find(current.qubits[edge.first]) == used_qubits.end() and used_qubits.find(current.qubits[edge.second]) == used_qubits.end():
 */
    __pyx_t_1 = __pyx_v_coupling_graph.begin();
    for (;;) {
      if (!(__pyx_t_1 != __pyx_v_coupling_graph.end())) break;
      __pyx_t_2 = *__pyx_t_1;
      ++__pyx_t_1;
      __pyx_v_edge = __pyx_t_2;

      /* "a_star_mapper.pyx":86
 *         for edge in coupling_graph:
 *             # apply only SWAP operations including at least one qubit in used_qubits
 *             if used_qubits.find(current.qubits[edge.first]) == used_qubits.end() and used_qubits.find(current.qubits[edge.second]) == used_qubits.end():             # <<<<<<<<<<<<<<
 *                 continue
 *             # do not apply the same SWAP gate twice in a row
 */
      __pyx_t_7 = ((__pyx_v_used_qubits.find((__pyx_v_current->qubits[__pyx_v_edge.first])) == __pyx_v_used_qubits.end()) != 0);
      if (__pyx_t_7) {
      } else {
        __pyx_t_6 = __pyx_t_7;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_7 = ((__pyx_v_used_qubits.find((__pyx_v_current->qubits[__pyx_v_edge.second])) == __pyx_v_used_qubits.end()) != 0);
      __pyx_t_6 = __pyx_t_7;
      __pyx_L10_bool_binop_done:;
      if (__pyx_t_6) {

        /* "a_star_mapper.pyx":87
 *             # apply only SWAP operations including at least one qubit in used_qubits
 *             if used_qubits.find(current.qubits[edge.first]) == used_qubits.end() and used_qubits.find(current.qubits[edge.second]) == used_qubits.end():
 *                 continue             # <<<<<<<<<<<<<<
 *             # do not apply the same SWAP gate twice in a row
 *             if current.swaps.size() > 0:
 */
        goto __pyx_L7_continue;

        /* "a_star_mapper.pyx":86
 *         for edge in coupling_graph:
 *             # apply only SWAP operations including at least one qubit in used_qubits
 *             if used_qubits.find(current.qubits[edge.first]) == used_qubits.end() and used_qubits.find(current.qubits[edge.second]) == used_qubits.end():             # <<<<<<<<<<<<<<
 *                 continue
 *             # do not apply the same SWAP gate twice in a row
 */
      }

      /* "a_star_mapper.pyx":89
 *                 continue
 *             # do not apply the same SWAP gate twice in a row
 *             if current.swaps.size() > 0:             # <<<<<<<<<<<<<<
 *                 g = current.swaps[current.swaps.size()-1]
 *                 if g.first == edge.first and g.second == edge.second:
 */
      __pyx_t_6 = ((__pyx_v_current->swaps.size() > 0) != 0);
      if (__pyx_t_6) {

        /* "a_star_mapper.pyx":90
 *             # do not apply the same SWAP gate twice in a row
 *             if current.swaps.size() > 0:
 *                 g = current.swaps[current.swaps.size()-1]             # <<<<<<<<<<<<<<
 *                 if g.first == edge.first and g.second == edge.second:
 *                     continue
 */
        __pyx_v_g = (__pyx_v_current->swaps[(__pyx_v_current->swaps.size() - 1)]);

        /* "a_star_mapper.pyx":91
 *             if current.swaps.size() > 0:
 *                 g = current.swaps[current.swaps.size()-1]
 *                 if g.first == edge.first and g.second == edge.second:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        __pyx_t_7 = ((__pyx_v_g.first == __pyx_v_edge.first) != 0);
        if (__pyx_t_7) {
        } else {
          __pyx_t_6 = __pyx_t_7;
          goto __pyx_L14_bool_binop_done;
        }
        __pyx_t_7 = ((__pyx_v_g.second == __pyx_v_edge.second) != 0);
        __pyx_t_6 = __pyx_t_7;
        __pyx_L14_bool_binop_done:;
        if (__pyx_t_6) {

          /* "a_star_mapper.pyx":92
 *                 g = current.swaps[current.swaps.size()-1]
 *                 if g.first == edge.first and g.second == edge.second:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *             # create a new node
 */
          goto __pyx_L7_continue;

          /* "a_star_mapper.pyx":91
 *             if current.swaps.size() > 0:
 *                 g = current.swaps[current.swaps.size()-1]
 *                 if g.first == edge.first and g.second == edge.second:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        }

        /* "a_star_mapper.pyx":89
 *                 continue
 *             # do not apply the same SWAP gate twice in a row
 *             if current.swaps.size() > 0:             # <<<<<<<<<<<<<<
 *                 g = current.swaps[current.swaps.size()-1]
 *                 if g.first == edge.first and g.second == edge.second:
 */
      }

      /* "a_star_mapper.pyx":95
 * 
 *             # create a new node
 *             new_node = new a_star_node_mapper()             # <<<<<<<<<<<<<<
 *             new_node.qubits = <int*>malloc(nqubits * sizeof(int))
 *             new_node.locations = <int*>malloc(nqubits * sizeof(int))
 */
      try {
        __pyx_t_3 = new __pyx_t_13a_star_mapper_a_star_node_mapper();
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 95, __pyx_L1_error)
      }
      __pyx_v_new_node = __pyx_t_3;

      /* "a_star_mapper.pyx":96
 *             # create a new node
 *             new_node = new a_star_node_mapper()
 *             new_node.qubits = <int*>malloc(nqubits * sizeof(int))             # <<<<<<<<<<<<<<
 *             new_node.locations = <int*>malloc(nqubits * sizeof(int))
 *             new_node.swaps = current.swaps
 */
      __pyx_v_new_node->qubits = ((int *)malloc((__pyx_v_nqubits * (sizeof(int)))));

      /* "a_star_mapper.pyx":97
 *             new_node = new a_star_node_mapper()
 *             new_node.qubits = <int*>malloc(nqubits * sizeof(int))
 *             new_node.locations = <int*>malloc(nqubits * sizeof(int))             # <<<<<<<<<<<<<<
 *             new_node.swaps = current.swaps
 *             new_node.swaps.push_back(edge)
 */
      __pyx_v_new_node->locations = ((int *)malloc((__pyx_v_nqubits * (sizeof(int)))));

      /* "a_star_mapper.pyx":98
 *             new_node.qubits = <int*>malloc(nqubits * sizeof(int))
 *             new_node.locations = <int*>malloc(nqubits * sizeof(int))
 *             new_node.swaps = current.swaps             # <<<<<<<<<<<<<<
 *             new_node.swaps.push_back(edge)
 * 
 */
      __pyx_t_4 = __pyx_v_current->swaps;
      __pyx_v_new_node->swaps = __pyx_t_4;

      /* "a_star_mapper.pyx":99
 *             new_node.locations = <int*>malloc(nqubits * sizeof(int))
 *             new_node.swaps = current.swaps
 *             new_node.swaps.push_back(edge)             # <<<<<<<<<<<<<<
 * 
 *             # initialize the new node with the mapping of the current node
 */
      try {
        __pyx_v_new_node->swaps.push_back(__pyx_v_edge);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 99, __pyx_L1_error)
      }

      /* "a_star_mapper.pyx":102
 * 
 *             # initialize the new node with the mapping of the current node
 *             memcpy(new_node.qubits, current.qubits, sizeof(int) * nqubits)             # <<<<<<<<<<<<<<
 *             memcpy(new_node.locations, current.locations, sizeof(int) * nqubits)
 * 
 */
      (void)(memcpy(__pyx_v_new_node->qubits, __pyx_v_current->qubits, ((sizeof(int)) * __pyx_v_nqubits)));

      /* "a_star_mapper.pyx":103
 *             # initialize the new node with the mapping of the current node
 *             memcpy(new_node.qubits, current.qubits, sizeof(int) * nqubits)
 *             memcpy(new_node.locations, current.locations, sizeof(int) * nqubits)             # <<<<<<<<<<<<<<
 * 
 *             # update mapping of the qubits resulting from adding a SWAP gate
 */
      (void)(memcpy(__pyx_v_new_node->locations, __pyx_v_current->locations, ((sizeof(int)) * __pyx_v_nqubits)));

      /* "a_star_mapper.pyx":106
 * 
 *             # update mapping of the qubits resulting from adding a SWAP gate
 *             tmp_qubit1 = new_node.qubits[edge.first]             # <<<<<<<<<<<<<<
 *             tmp_qubit2 = new_node.qubits[edge.second]
 *             new_node.qubits[edge.first] = tmp_qubit2
 */
      __pyx_v_tmp_qubit1 = (__pyx_v_new_node->qubits[__pyx_v_edge.first]);

      /* "a_star_mapper.pyx":107
 *             # update mapping of the qubits resulting from adding a SWAP gate
 *             tmp_qubit1 = new_node.qubits[edge.first]
 *             tmp_qubit2 = new_node.qubits[edge.second]             # <<<<<<<<<<<<<<
 *             new_node.qubits[edge.first] = tmp_qubit2
 *             new_node.qubits[edge.second] = tmp_qubit1
 */
      __pyx_v_tmp_qubit2 = (__pyx_v_new_node->qubits[__pyx_v_edge.second]);

      /* "a_star_mapper.pyx":108
 *             tmp_qubit1 = new_node.qubits[edge.first]
 *             tmp_qubit2 = new_node.qubits[edge.second]
 *             new_node.qubits[edge.first] = tmp_qubit2             # <<<<<<<<<<<<<<
 *             new_node.qubits[edge.second] = tmp_qubit1
 * 
 */
      (__pyx_v_new_node->qubits[__pyx_v_edge.first]) = __pyx_v_tmp_qubit2;

      /* "a_star_mapper.pyx":109
 *             tmp_qubit2 = new_node.qubits[edge.second]
 *             new_node.qubits[edge.first] = tmp_qubit2
 *             new_node.qubits[edge.second] = tmp_qubit1             # <<<<<<<<<<<<<<
 * 
 *             if tmp_qubit1 != -1:
 */
      (__pyx_v_new_node->qubits[__pyx_v_edge.second]) = __pyx_v_tmp_qubit1;

      /* "a_star_mapper.pyx":111
 *             new_node.qubits[edge.second] = tmp_qubit1
 * 
 *             if tmp_qubit1 != -1:             # <<<<<<<<<<<<<<
 *                 new_node.locations[tmp_qubit1] = edge.second
 *             if tmp_qubit2 != -1:
 */
      __pyx_t_6 = ((__pyx_v_tmp_qubit1 != -1L) != 0);
      if (__pyx_t_6) {

        /* "a_star_mapper.pyx":112
 * 
 *             if tmp_qubit1 != -1:
 *                 new_node.locations[tmp_qubit1] = edge.second             # <<<<<<<<<<<<<<
 *             if tmp_qubit2 != -1:
 *                 new_node.locations[tmp_qubit2] = edge.first
 */
        __pyx_t_8 = __pyx_v_edge.second;
        (__pyx_v_new_node->locations[__pyx_v_tmp_qubit1]) = __pyx_t_8;

        /* "a_star_mapper.pyx":111
 *             new_node.qubits[edge.second] = tmp_qubit1
 * 
 *             if tmp_qubit1 != -1:             # <<<<<<<<<<<<<<
 *                 new_node.locations[tmp_qubit1] = edge.second
 *             if tmp_qubit2 != -1:
 */
      }

      /* "a_star_mapper.pyx":113
 *             if tmp_qubit1 != -1:
 *                 new_node.locations[tmp_qubit1] = edge.second
 *             if tmp_qubit2 != -1:             # <<<<<<<<<<<<<<
 *                 new_node.locations[tmp_qubit2] = edge.first
 * 
 */
      __pyx_t_6 = ((__pyx_v_tmp_qubit2 != -1L) != 0);
      if (__pyx_t_6) {

        /* "a_star_mapper.pyx":114
 *                 new_node.locations[tmp_qubit1] = edge.second
 *             if tmp_qubit2 != -1:
 *                 new_node.locations[tmp_qubit2] = edge.first             # <<<<<<<<<<<<<<
 * 
 *             # determine fixed cost of new node
 */
        __pyx_t_8 = __pyx_v_edge.first;
        (__pyx_v_new_node->locations[__pyx_v_tmp_qubit2]) = __pyx_t_8;

        /* "a_star_mapper.pyx":113
 *             if tmp_qubit1 != -1:
 *                 new_node.locations[tmp_qubit1] = edge.second
 *             if tmp_qubit2 != -1:             # <<<<<<<<<<<<<<
 *                 new_node.locations[tmp_qubit2] = edge.first
 * 
 */
      }

      /* "a_star_mapper.pyx":117
 * 
 *             # determine fixed cost of new node
 *             interacted_qubits.clear()             # <<<<<<<<<<<<<<
 *             new_node.cost_fixed = 0
 *             for edge in new_node.swaps:
 */
      __pyx_v_interacted_qubits.clear();

      /* "a_star_mapper.pyx":118
 *             # determine fixed cost of new node
 *             interacted_qubits.clear()
 *             new_node.cost_fixed = 0             # <<<<<<<<<<<<<<
 *             for edge in new_node.swaps:
 *                 # only add the cost of a swap gate if it is not "free"
 */
      __pyx_v_new_node->cost_fixed = 0;

      /* "a_star_mapper.pyx":119
 *             interacted_qubits.clear()
 *             new_node.cost_fixed = 0
 *             for edge in new_node.swaps:             # <<<<<<<<<<<<<<
 *                 # only add the cost of a swap gate if it is not "free"
 *                 if interacted_qubits.find(edge.first) != interacted_qubits.end() or interacted_qubits.find(edge.first) != interacted_qubits.end() or free_swaps.find(edge) == free_swaps.end():
 */
      __pyx_t_10 = &__pyx_v_new_node->swaps;
      __pyx_t_9 = __pyx_t_10->begin();
      for (;;) {
        if (!(__pyx_t_9 != __pyx_t_10->end())) break;
        __pyx_t_2 = *__pyx_t_9;
        ++__pyx_t_9;
        __pyx_v_edge = __pyx_t_2;

        /* "a_star_mapper.pyx":121
 *             for edge in new_node.swaps:
 *                 # only add the cost of a swap gate if it is not "free"
 *                 if interacted_qubits.find(edge.first) != interacted_qubits.end() or interacted_qubits.find(edge.first) != interacted_qubits.end() or free_swaps.find(edge) == free_swaps.end():             # <<<<<<<<<<<<<<
 *                     new_node.cost_fixed += 1
 *                 interacted_qubits.insert(edge.first)
 */
        __pyx_t_7 = ((__pyx_v_interacted_qubits.find(__pyx_v_edge.first) != __pyx_v_interacted_qubits.end()) != 0);
        if (!__pyx_t_7) {
        } else {
          __pyx_t_6 = __pyx_t_7;
          goto __pyx_L21_bool_binop_done;
        }
        __pyx_t_7 = ((__pyx_v_interacted_qubits.find(__pyx_v_edge.first) != __pyx_v_interacted_qubits.end()) != 0);
        if (!__pyx_t_7) {
        } else {
          __pyx_t_6 = __pyx_t_7;
          goto __pyx_L21_bool_binop_done;
        }
        __pyx_t_7 = ((__pyx_v_free_swaps.find(__pyx_v_edge) == __pyx_v_free_swaps.end()) != 0);
        __pyx_t_6 = __pyx_t_7;
        __pyx_L21_bool_binop_done:;
        if (__pyx_t_6) {

          /* "a_star_mapper.pyx":122
 *                 # only add the cost of a swap gate if it is not "free"
 *                 if interacted_qubits.find(edge.first) != interacted_qubits.end() or interacted_qubits.find(edge.first) != interacted_qubits.end() or free_swaps.find(edge) == free_swaps.end():
 *                     new_node.cost_fixed += 1             # <<<<<<<<<<<<<<
 *                 interacted_qubits.insert(edge.first)
 *                 interacted_qubits.insert(edge.second)
 */
          __pyx_v_new_node->cost_fixed = (__pyx_v_new_node->cost_fixed + 1);

          /* "a_star_mapper.pyx":121
 *             for edge in new_node.swaps:
 *                 # only add the cost of a swap gate if it is not "free"
 *                 if interacted_qubits.find(edge.first) != interacted_qubits.end() or interacted_qubits.find(edge.first) != interacted_qubits.end() or free_swaps.find(edge) == free_swaps.end():             # <<<<<<<<<<<<<<
 *                     new_node.cost_fixed += 1
 *                 interacted_qubits.insert(edge.first)
 */
        }

        /* "a_star_mapper.pyx":123
 *                 if interacted_qubits.find(edge.first) != interacted_qubits.end() or interacted_qubits.find(edge.first) != interacted_qubits.end() or free_swaps.find(edge) == free_swaps.end():
 *                     new_node.cost_fixed += 1
 *                 interacted_qubits.insert(edge.first)             # <<<<<<<<<<<<<<
 *                 interacted_qubits.insert(edge.second)
 * 
 */
        try {
          __pyx_v_interacted_qubits.insert(__pyx_v_edge.first);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 123, __pyx_L1_error)
        }

        /* "a_star_mapper.pyx":124
 *                     new_node.cost_fixed += 1
 *                 interacted_qubits.insert(edge.first)
 *                 interacted_qubits.insert(edge.second)             # <<<<<<<<<<<<<<
 * 
 *             new_node.is_goal = False
 */
        try {
          __pyx_v_interacted_qubits.insert(__pyx_v_edge.second);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 124, __pyx_L1_error)
        }

        /* "a_star_mapper.pyx":119
 *             interacted_qubits.clear()
 *             new_node.cost_fixed = 0
 *             for edge in new_node.swaps:             # <<<<<<<<<<<<<<
 *                 # only add the cost of a swap gate if it is not "free"
 *                 if interacted_qubits.find(edge.first) != interacted_qubits.end() or interacted_qubits.find(edge.first) != interacted_qubits.end() or free_swaps.find(edge) == free_swaps.end():
 */
      }

      /* "a_star_mapper.pyx":126
 *                 interacted_qubits.insert(edge.second)
 * 
 *             new_node.is_goal = False             # <<<<<<<<<<<<<<
 *             new_node.cost_heur = 0
 * 
 */
      __pyx_v_new_node->is_goal = 0;

      /* "a_star_mapper.pyx":127
 * 
 *             new_node.is_goal = False
 *             new_node.cost_heur = 0             # <<<<<<<<<<<<<<
 * 
 *             # Check wheter a goal state is reached (i.e. whether any gate can be applied) and determine heuristic cost
 */
      __pyx_v_new_node->cost_heur = 0;

      /* "a_star_mapper.pyx":130
 * 
 *             # Check wheter a goal state is reached (i.e. whether any gate can be applied) and determine heuristic cost
 *             for g in gates:             # <<<<<<<<<<<<<<
 *                 if dist[new_node.locations[g.first]][new_node.locations[g.second]] == 1:
 *                     new_node.is_goal = True
 */
      __pyx_t_11 = __pyx_v_gates.begin();
      for (;;) {
        if (!(__pyx_t_11 != __pyx_v_gates.end())) break;
        __pyx_t_2 = *__pyx_t_11;
        ++__pyx_t_11;
        __pyx_v_g = __pyx_t_2;

        /* "a_star_mapper.pyx":131
 *             # Check wheter a goal state is reached (i.e. whether any gate can be applied) and determine heuristic cost
 *             for g in gates:
 *                 if dist[new_node.locations[g.first]][new_node.locations[g.second]] == 1:             # <<<<<<<<<<<<<<
 *                     new_node.is_goal = True
 *                 # estimate remaining cost (the heuristic is not necessarily admissible and, hence, may yield to sub-optimal local solutions)
 */
        __pyx_t_6 = ((((__pyx_v_dist[(__pyx_v_new_node->locations[__pyx_v_g.first])])[(__pyx_v_new_node->locations[__pyx_v_g.second])]) == 1) != 0);
        if (__pyx_t_6) {

          /* "a_star_mapper.pyx":132
 *             for g in gates:
 *                 if dist[new_node.locations[g.first]][new_node.locations[g.second]] == 1:
 *                     new_node.is_goal = True             # <<<<<<<<<<<<<<
 *                 # estimate remaining cost (the heuristic is not necessarily admissible and, hence, may yield to sub-optimal local solutions)
 *                 new_node.cost_heur += dist[new_node.locations[g.first]][new_node.locations[g.second]] - 1
 */
          __pyx_v_new_node->is_goal = 1;

          /* "a_star_mapper.pyx":131
 *             # Check wheter a goal state is reached (i.e. whether any gate can be applied) and determine heuristic cost
 *             for g in gates:
 *                 if dist[new_node.locations[g.first]][new_node.locations[g.second]] == 1:             # <<<<<<<<<<<<<<
 *                     new_node.is_goal = True
 *                 # estimate remaining cost (the heuristic is not necessarily admissible and, hence, may yield to sub-optimal local solutions)
 */
        }

        /* "a_star_mapper.pyx":134
 *                     new_node.is_goal = True
 *                 # estimate remaining cost (the heuristic is not necessarily admissible and, hence, may yield to sub-optimal local solutions)
 *                 new_node.cost_heur += dist[new_node.locations[g.first]][new_node.locations[g.second]] - 1             # <<<<<<<<<<<<<<
 * 
 *             # add new node to the queue
 */
        __pyx_v_new_node->cost_heur = (__pyx_v_new_node->cost_heur + (((__pyx_v_dist[(__pyx_v_new_node->locations[__pyx_v_g.first])])[(__pyx_v_new_node->locations[__pyx_v_g.second])]) - 1));

        /* "a_star_mapper.pyx":130
 * 
 *             # Check wheter a goal state is reached (i.e. whether any gate can be applied) and determine heuristic cost
 *             for g in gates:             # <<<<<<<<<<<<<<
 *                 if dist[new_node.locations[g.first]][new_node.locations[g.second]] == 1:
 *                     new_node.is_goal = True
 */
      }

      /* "a_star_mapper.pyx":137
 * 
 *             # add new node to the queue
 *             q.push(pair[int, uintptr_t](INT_MAX - (new_node.cost_fixed + new_node.cost_heur), <uintptr_t>new_node))             # <<<<<<<<<<<<<<
 * 
 *         # delete current node
 */
      try {
        __pyx_t_5 = std::pair<int,uintptr_t> ((INT_MAX - (__pyx_v_new_node->cost_fixed + __pyx_v_new_node->cost_heur)), ((uintptr_t)__pyx_v_new_node));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 137, __pyx_L1_error)
      }
      __pyx_v_q.push(__pyx_t_5);

      /* "a_star_mapper.pyx":84
 * 
 *         # determine all successor nodes (one for each SWAP gate that can be applied)
 *         for edge in coupling_graph:             # <<<<<<<<<<<<<<
 *             # apply only SWAP operations including at least one qubit in used_qubits
 *             if used_qubits.find(current.qubits[edge.first]) == used_qubits.end() and used_qubits.find(current.qubits[edge.second]) == used_qubits.end():
 */
      __pyx_L7_continue:;
    }

    /* "a_star_mapper.pyx":140
 * 
 *         # delete current node
 *         free(current.locations)             # <<<<<<<<<<<<<<
 *         free(current.qubits)
 *         del(current)
 */
    free(__pyx_v_current->locations);

    /* "a_star_mapper.pyx":141
 *         # delete current node
 *         free(current.locations)
 *         free(current.qubits)             # <<<<<<<<<<<<<<
 *         del(current)
 * 
 */
    free(__pyx_v_current->qubits);

    /* "a_star_mapper.pyx":142
 *         free(current.locations)
 *         free(current.qubits)
 *         del(current)             # <<<<<<<<<<<<<<
 * 
 *     current = <a_star_node_mapper*>(q.top().second)
 */
    delete __pyx_v_current;
  }

  /* "a_star_mapper.pyx":144
 *         del(current)
 * 
 *     current = <a_star_node_mapper*>(q.top().second)             # <<<<<<<<<<<<<<
 *     q.pop()
 * 
 */
  __pyx_v_current = ((__pyx_t_13a_star_mapper_a_star_node_mapper *)__pyx_v_q.top().second);

  /* "a_star_mapper.pyx":145
 * 
 *     current = <a_star_node_mapper*>(q.top().second)
 *     q.pop()             # <<<<<<<<<<<<<<
 * 
 *     # clean up
 */
  __pyx_v_q.pop();

  /* "a_star_mapper.pyx":148
 * 
 *     # clean up
 *     while not q.empty():             # <<<<<<<<<<<<<<
 *         new_node = <a_star_node_mapper*>(q.top().second)
 *         free(new_node.locations)
 */
  while (1) {
    __pyx_t_6 = ((!(__pyx_v_q.empty() != 0)) != 0);
    if (!__pyx_t_6) break;

    /* "a_star_mapper.pyx":149
 *     # clean up
 *     while not q.empty():
 *         new_node = <a_star_node_mapper*>(q.top().second)             # <<<<<<<<<<<<<<
 *         free(new_node.locations)
 *         free(new_node.qubits)
 */
    __pyx_v_new_node = ((__pyx_t_13a_star_mapper_a_star_node_mapper *)__pyx_v_q.top().second);

    /* "a_star_mapper.pyx":150
 *     while not q.empty():
 *         new_node = <a_star_node_mapper*>(q.top().second)
 *         free(new_node.locations)             # <<<<<<<<<<<<<<
 *         free(new_node.qubits)
 *         del(new_node)
 */
    free(__pyx_v_new_node->locations);

    /* "a_star_mapper.pyx":151
 *         new_node = <a_star_node_mapper*>(q.top().second)
 *         free(new_node.locations)
 *         free(new_node.qubits)             # <<<<<<<<<<<<<<
 *         del(new_node)
 *         q.pop()
 */
    free(__pyx_v_new_node->qubits);

    /* "a_star_mapper.pyx":152
 *         free(new_node.locations)
 *         free(new_node.qubits)
 *         del(new_node)             # <<<<<<<<<<<<<<
 *         q.pop()
 * 
 */
    delete __pyx_v_new_node;

    /* "a_star_mapper.pyx":153
 *         free(new_node.qubits)
 *         del(new_node)
 *         q.pop()             # <<<<<<<<<<<<<<
 * 
 *     return current
 */
    __pyx_v_q.pop();
  }

  /* "a_star_mapper.pyx":155
 *         q.pop()
 * 
 *     return current             # <<<<<<<<<<<<<<
 * 
 * # function to rewrite gates with the current mapping and add them to the compiled circuit
 */
  __pyx_r = __pyx_v_current;
  goto __pyx_L0;

  /* "a_star_mapper.pyx":51
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef a_star_node_mapper* a_star_search(set[pair[int, int]]& gates, int* map, int* loc, int** dist, int nqubits, set[pair[int, int] ]& coupling_graph, set[pair[int, int]]& free_swaps) except + :             # <<<<<<<<<<<<<<
 *     cdef priority_queue[pair[int, uintptr_t]] q
 *     cdef a_star_node_mapper* current
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("a_star_mapper.a_star_search", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "a_star_mapper.pyx":158
 * 
 * # function to rewrite gates with the current mapping and add them to the compiled circuit
 * cdef add_rewritten_gates(gates_original, int* locations, compiled_circuit):             # <<<<<<<<<<<<<<
 *     qubit_names = compiled_circuit.get_qubits()
 *     for g in gates_original:
 */

static PyObject *__pyx_f_13a_star_mapper_add_rewritten_gates(PyObject *__pyx_v_gates_original, int *__pyx_v_locations, PyObject *__pyx_v_compiled_circuit) {
  PyObject *__pyx_v_qubit_names = NULL;
  PyObject *__pyx_v_g = NULL;
  PyObject *__pyx_v_qargs_new = NULL;
  PyObject *__pyx_v_qarg = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  __Pyx_RefNannySetupContext("add_rewritten_gates", 0);

  /* "a_star_mapper.pyx":159
 * # function to rewrite gates with the current mapping and add them to the compiled circuit
 * cdef add_rewritten_gates(gates_original, int* locations, compiled_circuit):
 *     qubit_names = compiled_circuit.get_qubits()             # <<<<<<<<<<<<<<
 *     for g in gates_original:
 *         qargs_new = []
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_compiled_circuit, __pyx_n_s_get_qubits); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_qubit_names = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "a_star_mapper.pyx":160
 * cdef add_rewritten_gates(gates_original, int* locations, compiled_circuit):
 *     qubit_names = compiled_circuit.get_qubits()
 *     for g in gates_original:             # <<<<<<<<<<<<<<
 *         qargs_new = []
 *         for qarg in g['qargs']:
 */
  if (likely(PyList_CheckExact(__pyx_v_gates_original)) || PyTuple_CheckExact(__pyx_v_gates_original)) {
    __pyx_t_1 = __pyx_v_gates_original; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_gates_original); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 160, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 160, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 160, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 160, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_g, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "a_star_mapper.pyx":161
 *     qubit_names = compiled_circuit.get_qubits()
 *     for g in gates_original:
 *         qargs_new = []             # <<<<<<<<<<<<<<
 *         for qarg in g['qargs']:
 *             qargs_new += [('q', locations[qubit_names.index(qarg)])]
 */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_qargs_new, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "a_star_mapper.pyx":162
 *     for g in gates_original:
 *         qargs_new = []
 *         for qarg in g['qargs']:             # <<<<<<<<<<<<<<
 *             qargs_new += [('q', locations[qubit_names.index(qarg)])]
 *         g['qargs'] = qargs_new
 */
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_g, __pyx_n_s_qargs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 162, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 162, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 162, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_7(__pyx_t_3);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 162, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_qarg, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "a_star_mapper.pyx":163
 *         qargs_new = []
 *         for qarg in g['qargs']:
 *             qargs_new += [('q', locations[qubit_names.index(qarg)])]             # <<<<<<<<<<<<<<
 *         g['qargs'] = qargs_new
 *         compiled_circuit.apply_operation_back(g['name'], qargs_new, g['cargs'], g['params'], g['condition'])
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_qubit_names, __pyx_n_s_index); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 163, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      if (!__pyx_t_9) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_qarg); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 163, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_8)) {
          PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_v_qarg};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 163, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
          PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_v_qarg};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 163, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 163, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
          __Pyx_INCREF(__pyx_v_qarg);
          __Pyx_GIVEREF(__pyx_v_qarg);
          PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_v_qarg);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 163, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 163, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_locations[__pyx_t_11])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 163, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 163, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_n_s_q);
      __Pyx_GIVEREF(__pyx_n_s_q);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_q);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 163, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_8);
      PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_InPlaceAdd(__pyx_v_qargs_new, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 163, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_qargs_new, ((PyObject*)__pyx_t_8));
      __pyx_t_8 = 0;

      /* "a_star_mapper.pyx":162
 *     for g in gates_original:
 *         qargs_new = []
 *         for qarg in g['qargs']:             # <<<<<<<<<<<<<<
 *             qargs_new += [('q', locations[qubit_names.index(qarg)])]
 *         g['qargs'] = qargs_new
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "a_star_mapper.pyx":164
 *         for qarg in g['qargs']:
 *             qargs_new += [('q', locations[qubit_names.index(qarg)])]
 *         g['qargs'] = qargs_new             # <<<<<<<<<<<<<<
 *         compiled_circuit.apply_operation_back(g['name'], qargs_new, g['cargs'], g['params'], g['condition'])
 *     return compiled_circuit
 */
    if (unlikely(PyObject_SetItem(__pyx_v_g, __pyx_n_s_qargs, __pyx_v_qargs_new) < 0)) __PYX_ERR(0, 164, __pyx_L1_error)

    /* "a_star_mapper.pyx":165
 *             qargs_new += [('q', locations[qubit_names.index(qarg)])]
 *         g['qargs'] = qargs_new
 *         compiled_circuit.apply_operation_back(g['name'], qargs_new, g['cargs'], g['params'], g['condition'])             # <<<<<<<<<<<<<<
 *     return compiled_circuit
 * 
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_compiled_circuit, __pyx_n_s_apply_operation_back); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_g, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = __Pyx_PyObject_Dict_GetItem(__pyx_v_g, __pyx_n_s_cargs); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_9 = __Pyx_PyObject_Dict_GetItem(__pyx_v_g, __pyx_n_s_params); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_12 = __Pyx_PyObject_Dict_GetItem(__pyx_v_g, __pyx_n_s_condition); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_13 = NULL;
    __pyx_t_14 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_14 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[6] = {__pyx_t_13, __pyx_t_2, __pyx_v_qargs_new, __pyx_t_10, __pyx_t_9, __pyx_t_12};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_14, 5+__pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 165, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[6] = {__pyx_t_13, __pyx_t_2, __pyx_v_qargs_new, __pyx_t_10, __pyx_t_9, __pyx_t_12};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_14, 5+__pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 165, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    } else
    #endif
    {
      __pyx_t_15 = PyTuple_New(5+__pyx_t_14); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 165, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      if (__pyx_t_13) {
        __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_13); __pyx_t_13 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_14, __pyx_t_2);
      __Pyx_INCREF(__pyx_v_qargs_new);
      __Pyx_GIVEREF(__pyx_v_qargs_new);
      PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_14, __pyx_v_qargs_new);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_15, 2+__pyx_t_14, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_15, 3+__pyx_t_14, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_15, 4+__pyx_t_14, __pyx_t_12);
      __pyx_t_2 = 0;
      __pyx_t_10 = 0;
      __pyx_t_9 = 0;
      __pyx_t_12 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_15, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 165, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "a_star_mapper.pyx":160
 * cdef add_rewritten_gates(gates_original, int* locations, compiled_circuit):
 *     qubit_names = compiled_circuit.get_qubits()
 *     for g in gates_original:             # <<<<<<<<<<<<<<
 *         qargs_new = []
 *         for qarg in g['qargs']:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "a_star_mapper.pyx":166
 *         g['qargs'] = qargs_new
 *         compiled_circuit.apply_operation_back(g['name'], qargs_new, g['cargs'], g['params'], g['condition'])
 *     return compiled_circuit             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_compiled_circuit);
  __pyx_r = __pyx_v_compiled_circuit;
  goto __pyx_L0;

  /* "a_star_mapper.pyx":158
 * 
 * # function to rewrite gates with the current mapping and add them to the compiled circuit
 * cdef add_rewritten_gates(gates_original, int* locations, compiled_circuit):             # <<<<<<<<<<<<<<
 *     qubit_names = compiled_circuit.get_qubits()
 *     for g in gates_original:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("a_star_mapper.add_rewritten_gates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_qubit_names);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XDECREF(__pyx_v_qargs_new);
  __Pyx_XDECREF(__pyx_v_qarg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "a_star_mapper.pyx":179
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef a_star_node_initial_mapping* find_initial_permutation(int nqubits, set[pair[int, int]] initial_gates, int* first_interaction, int** dist, set[pair[int, int]] coupling_graph):             # <<<<<<<<<<<<<<
 *     cdef priority_queue[pair[int, uintptr_t]] q
 *     cdef a_star_node_initial_mapping* current
 */

static __pyx_t_13a_star_mapper_a_star_node_initial_mapping *__pyx_f_13a_star_mapper_find_initial_permutation(int __pyx_v_nqubits, std::set<std::pair<int,int> >  __pyx_v_initial_gates, int *__pyx_v_first_interaction, int **__pyx_v_dist, std::set<std::pair<int,int> >  __pyx_v_coupling_graph) {
  std::priority_queue<std::pair<int,uintptr_t> >  __pyx_v_q;
  __pyx_t_13a_star_mapper_a_star_node_initial_mapping *__pyx_v_current;
  __pyx_t_13a_star_mapper_a_star_node_initial_mapping *__pyx_v_new_node;
  int __pyx_v_i;
  int __pyx_v_k;
  int __pyx_v_min_dist;
  std::pair<int,int>  __pyx_v_gate;
  std::pair<int,int>  __pyx_v_edge;
  __pyx_t_13a_star_mapper_a_star_node_initial_mapping *__pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_13a_star_mapper_a_star_node_initial_mapping *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  std::set<std::pair<int,int> > ::iterator __pyx_t_5;
  std::pair<int,int>  __pyx_t_6;
  std::pair<int,uintptr_t>  __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  std::vector<std::pair<int,int> >  __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  __Pyx_RefNannySetupContext("find_initial_permutation", 0);

  /* "a_star_mapper.pyx":188
 * 
 *     # create a new node representing the initial mapping (none of the qubits is mapped yet)
 *     current = new a_star_node_initial_mapping()             # <<<<<<<<<<<<<<
 *     current.cost_fixed = 0
 *     current.cost_heur = 0
 */
  try {
    __pyx_t_1 = new __pyx_t_13a_star_mapper_a_star_node_initial_mapping();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 188, __pyx_L1_error)
  }
  __pyx_v_current = __pyx_t_1;

  /* "a_star_mapper.pyx":189
 *     # create a new node representing the initial mapping (none of the qubits is mapped yet)
 *     current = new a_star_node_initial_mapping()
 *     current.cost_fixed = 0             # <<<<<<<<<<<<<<
 *     current.cost_heur = 0
 *     current.locations = <int*>malloc(nqubits * sizeof(int))
 */
  __pyx_v_current->cost_fixed = 0;

  /* "a_star_mapper.pyx":190
 *     current = new a_star_node_initial_mapping()
 *     current.cost_fixed = 0
 *     current.cost_heur = 0             # <<<<<<<<<<<<<<
 *     current.locations = <int*>malloc(nqubits * sizeof(int))
 *     current.qubits = <int*>malloc(nqubits * sizeof(int))
 */
  __pyx_v_current->cost_heur = 0;

  /* "a_star_mapper.pyx":191
 *     current.cost_fixed = 0
 *     current.cost_heur = 0
 *     current.locations = <int*>malloc(nqubits * sizeof(int))             # <<<<<<<<<<<<<<
 *     current.qubits = <int*>malloc(nqubits * sizeof(int))
 *     for i in range(nqubits):
 */
  __pyx_v_current->locations = ((int *)malloc((__pyx_v_nqubits * (sizeof(int)))));

  /* "a_star_mapper.pyx":192
 *     current.cost_heur = 0
 *     current.locations = <int*>malloc(nqubits * sizeof(int))
 *     current.qubits = <int*>malloc(nqubits * sizeof(int))             # <<<<<<<<<<<<<<
 *     for i in range(nqubits):
 *         current.locations[i] = -1
 */
  __pyx_v_current->qubits = ((int *)malloc((__pyx_v_nqubits * (sizeof(int)))));

  /* "a_star_mapper.pyx":193
 *     current.locations = <int*>malloc(nqubits * sizeof(int))
 *     current.qubits = <int*>malloc(nqubits * sizeof(int))
 *     for i in range(nqubits):             # <<<<<<<<<<<<<<
 *         current.locations[i] = -1
 *         current.qubits[i] = -1
 */
  __pyx_t_2 = __pyx_v_nqubits;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "a_star_mapper.pyx":194
 *     current.qubits = <int*>malloc(nqubits * sizeof(int))
 *     for i in range(nqubits):
 *         current.locations[i] = -1             # <<<<<<<<<<<<<<
 *         current.qubits[i] = -1
 *     for gate in initial_gates:
 */
    (__pyx_v_current->locations[__pyx_v_i]) = -1;

    /* "a_star_mapper.pyx":195
 *     for i in range(nqubits):
 *         current.locations[i] = -1
 *         current.qubits[i] = -1             # <<<<<<<<<<<<<<
 *     for gate in initial_gates:
 *         current.remaining_gates.push_back(gate)
 */
    (__pyx_v_current->qubits[__pyx_v_i]) = -1;
  }

  /* "a_star_mapper.pyx":196
 *         current.locations[i] = -1
 *         current.qubits[i] = -1
 *     for gate in initial_gates:             # <<<<<<<<<<<<<<
 *         current.remaining_gates.push_back(gate)
 * 
 */
  __pyx_t_5 = __pyx_v_initial_gates.begin();
  for (;;) {
    if (!(__pyx_t_5 != __pyx_v_initial_gates.end())) break;
    __pyx_t_6 = *__pyx_t_5;
    ++__pyx_t_5;
    __pyx_v_gate = __pyx_t_6;

    /* "a_star_mapper.pyx":197
 *         current.qubits[i] = -1
 *     for gate in initial_gates:
 *         current.remaining_gates.push_back(gate)             # <<<<<<<<<<<<<<
 * 
 *     q.push(pair[int, uintptr_t](current.cost_fixed + current.cost_heur, <uintptr_t>current))
 */
    try {
      __pyx_v_current->remaining_gates.push_back(__pyx_v_gate);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 197, __pyx_L1_error)
    }

    /* "a_star_mapper.pyx":196
 *         current.locations[i] = -1
 *         current.qubits[i] = -1
 *     for gate in initial_gates:             # <<<<<<<<<<<<<<
 *         current.remaining_gates.push_back(gate)
 * 
 */
  }

  /* "a_star_mapper.pyx":199
 *         current.remaining_gates.push_back(gate)
 * 
 *     q.push(pair[int, uintptr_t](current.cost_fixed + current.cost_heur, <uintptr_t>current))             # <<<<<<<<<<<<<<
 * 
 *     # perform A* search
 */
  try {
    __pyx_t_7 = std::pair<int,uintptr_t> ((__pyx_v_current->cost_fixed + __pyx_v_current->cost_heur), ((uintptr_t)__pyx_v_current));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 199, __pyx_L1_error)
  }
  __pyx_v_q.push(__pyx_t_7);

  /* "a_star_mapper.pyx":202
 * 
 *     # perform A* search
 *     while (<a_star_node_initial_mapping*>q.top().second).remaining_gates.size() != 0:             # <<<<<<<<<<<<<<
 *         current = <a_star_node_initial_mapping*> (q.top().second)
 *         q.pop()
 */
  while (1) {
    __pyx_t_8 = ((((__pyx_t_13a_star_mapper_a_star_node_initial_mapping *)__pyx_v_q.top().second)->remaining_gates.size() != 0) != 0);
    if (!__pyx_t_8) break;

    /* "a_star_mapper.pyx":203
 *     # perform A* search
 *     while (<a_star_node_initial_mapping*>q.top().second).remaining_gates.size() != 0:
 *         current = <a_star_node_initial_mapping*> (q.top().second)             # <<<<<<<<<<<<<<
 *         q.pop()
 *         gate = current.remaining_gates.back()
 */
    __pyx_v_current = ((__pyx_t_13a_star_mapper_a_star_node_initial_mapping *)__pyx_v_q.top().second);

    /* "a_star_mapper.pyx":204
 *     while (<a_star_node_initial_mapping*>q.top().second).remaining_gates.size() != 0:
 *         current = <a_star_node_initial_mapping*> (q.top().second)
 *         q.pop()             # <<<<<<<<<<<<<<
 *         gate = current.remaining_gates.back()
 *         current.remaining_gates.pop_back()
 */
    __pyx_v_q.pop();

    /* "a_star_mapper.pyx":205
 *         current = <a_star_node_initial_mapping*> (q.top().second)
 *         q.pop()
 *         gate = current.remaining_gates.back()             # <<<<<<<<<<<<<<
 *         current.remaining_gates.pop_back()
 * 
 */
    __pyx_v_gate = __pyx_v_current->remaining_gates.back();

    /* "a_star_mapper.pyx":206
 *         q.pop()
 *         gate = current.remaining_gates.back()
 *         current.remaining_gates.pop_back()             # <<<<<<<<<<<<<<
 * 
 *         # determine all successor nodes (a gate group acting on a pair of qubits can be applied to any edge in the coupling map)
 */
    __pyx_v_current->remaining_gates.pop_back();

    /* "a_star_mapper.pyx":210
 *         # determine all successor nodes (a gate group acting on a pair of qubits can be applied to any edge in the coupling map)
 *         # we enforce mapping these groups to an edge in the coupling map in order to avoid SWAPs before appliying the first gate
 *         for edge in coupling_graph:             # <<<<<<<<<<<<<<
 *             if current.qubits[edge.first] != -1 or current.qubits[edge.second] != -1:
 *                 continue
 */
    __pyx_t_5 = __pyx_v_coupling_graph.begin();
    for (;;) {
      if (!(__pyx_t_5 != __pyx_v_coupling_graph.end())) break;
      __pyx_t_6 = *__pyx_t_5;
      ++__pyx_t_5;
      __pyx_v_edge = __pyx_t_6;

      /* "a_star_mapper.pyx":211
 *         # we enforce mapping these groups to an edge in the coupling map in order to avoid SWAPs before appliying the first gate
 *         for edge in coupling_graph:
 *             if current.qubits[edge.first] != -1 or current.qubits[edge.second] != -1:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      __pyx_t_9 = (((__pyx_v_current->qubits[__pyx_v_edge.first]) != -1L) != 0);
      if (!__pyx_t_9) {
      } else {
        __pyx_t_8 = __pyx_t_9;
        goto __pyx_L12_bool_binop_done;
      }
      __pyx_t_9 = (((__pyx_v_current->qubits[__pyx_v_edge.second]) != -1L) != 0);
      __pyx_t_8 = __pyx_t_9;
      __pyx_L12_bool_binop_done:;
      if (__pyx_t_8) {

        /* "a_star_mapper.pyx":212
 *         for edge in coupling_graph:
 *             if current.qubits[edge.first] != -1 or current.qubits[edge.second] != -1:
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             # create a new node
 */
        goto __pyx_L9_continue;

        /* "a_star_mapper.pyx":211
 *         # we enforce mapping these groups to an edge in the coupling map in order to avoid SWAPs before appliying the first gate
 *         for edge in coupling_graph:
 *             if current.qubits[edge.first] != -1 or current.qubits[edge.second] != -1:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      }

      /* "a_star_mapper.pyx":215
 * 
 *             # create a new node
 *             new_node = new a_star_node_initial_mapping()             # <<<<<<<<<<<<<<
 *             new_node.locations = <int*>malloc(nqubits * sizeof(int))
 *             new_node.qubits = <int*>malloc(nqubits * sizeof(int))
 */
      try {
        __pyx_t_1 = new __pyx_t_13a_star_mapper_a_star_node_initial_mapping();
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 215, __pyx_L1_error)
      }
      __pyx_v_new_node = __pyx_t_1;

      /* "a_star_mapper.pyx":216
 *             # create a new node
 *             new_node = new a_star_node_initial_mapping()
 *             new_node.locations = <int*>malloc(nqubits * sizeof(int))             # <<<<<<<<<<<<<<
 *             new_node.qubits = <int*>malloc(nqubits * sizeof(int))
 * 
 */
      __pyx_v_new_node->locations = ((int *)malloc((__pyx_v_nqubits * (sizeof(int)))));

      /* "a_star_mapper.pyx":217
 *             new_node = new a_star_node_initial_mapping()
 *             new_node.locations = <int*>malloc(nqubits * sizeof(int))
 *             new_node.qubits = <int*>malloc(nqubits * sizeof(int))             # <<<<<<<<<<<<<<
 * 
 *             # initialize the new node with the mapping of the current node
 */
      __pyx_v_new_node->qubits = ((int *)malloc((__pyx_v_nqubits * (sizeof(int)))));

      /* "a_star_mapper.pyx":220
 * 
 *             # initialize the new node with the mapping of the current node
 *             memcpy(new_node.locations, current.locations, sizeof(int) * nqubits)             # <<<<<<<<<<<<<<
 *             memcpy(new_node.qubits, current.qubits, sizeof(int) * nqubits)
 * 
 */
      (void)(memcpy(__pyx_v_new_node->locations, __pyx_v_current->locations, ((sizeof(int)) * __pyx_v_nqubits)));

      /* "a_star_mapper.pyx":221
 *             # initialize the new node with the mapping of the current node
 *             memcpy(new_node.locations, current.locations, sizeof(int) * nqubits)
 *             memcpy(new_node.qubits, current.qubits, sizeof(int) * nqubits)             # <<<<<<<<<<<<<<
 * 
 *             new_node.remaining_gates = current.remaining_gates
 */
      (void)(memcpy(__pyx_v_new_node->qubits, __pyx_v_current->qubits, ((sizeof(int)) * __pyx_v_nqubits)));

      /* "a_star_mapper.pyx":223
 *             memcpy(new_node.qubits, current.qubits, sizeof(int) * nqubits)
 * 
 *             new_node.remaining_gates = current.remaining_gates             # <<<<<<<<<<<<<<
 * 
 *             new_node.qubits[edge.first] = gate.first
 */
      __pyx_t_10 = __pyx_v_current->remaining_gates;
      __pyx_v_new_node->remaining_gates = __pyx_t_10;

      /* "a_star_mapper.pyx":225
 *             new_node.remaining_gates = current.remaining_gates
 * 
 *             new_node.qubits[edge.first] = gate.first             # <<<<<<<<<<<<<<
 *             new_node.locations[gate.first] = edge.first
 * 
 */
      __pyx_t_2 = __pyx_v_gate.first;
      (__pyx_v_new_node->qubits[__pyx_v_edge.first]) = __pyx_t_2;

      /* "a_star_mapper.pyx":226
 * 
 *             new_node.qubits[edge.first] = gate.first
 *             new_node.locations[gate.first] = edge.first             # <<<<<<<<<<<<<<
 * 
 *             new_node.qubits[edge.second] = gate.second
 */
      __pyx_t_2 = __pyx_v_edge.first;
      (__pyx_v_new_node->locations[__pyx_v_gate.first]) = __pyx_t_2;

      /* "a_star_mapper.pyx":228
 *             new_node.locations[gate.first] = edge.first
 * 
 *             new_node.qubits[edge.second] = gate.second             # <<<<<<<<<<<<<<
 *             new_node.locations[gate.second] = edge.second
 * 
 */
      __pyx_t_2 = __pyx_v_gate.second;
      (__pyx_v_new_node->qubits[__pyx_v_edge.second]) = __pyx_t_2;

      /* "a_star_mapper.pyx":229
 * 
 *             new_node.qubits[edge.second] = gate.second
 *             new_node.locations[gate.second] = edge.second             # <<<<<<<<<<<<<<
 * 
 *             new_node.cost_fixed = current.cost_fixed
 */
      __pyx_t_2 = __pyx_v_edge.second;
      (__pyx_v_new_node->locations[__pyx_v_gate.second]) = __pyx_t_2;

      /* "a_star_mapper.pyx":231
 *             new_node.locations[gate.second] = edge.second
 * 
 *             new_node.cost_fixed = current.cost_fixed             # <<<<<<<<<<<<<<
 *             new_node.cost_heur = 0
 *             if first_interaction[gate.first] != -1 and new_node.locations[first_interaction[gate.first]] != -1:
 */
      __pyx_t_2 = __pyx_v_current->cost_fixed;
      __pyx_v_new_node->cost_fixed = __pyx_t_2;

      /* "a_star_mapper.pyx":232
 * 
 *             new_node.cost_fixed = current.cost_fixed
 *             new_node.cost_heur = 0             # <<<<<<<<<<<<<<
 *             if first_interaction[gate.first] != -1 and new_node.locations[first_interaction[gate.first]] != -1:
 *                 new_node.cost_fixed += dist[new_node.locations[gate.first]][new_node.locations[first_interaction[gate.first]]]
 */
      __pyx_v_new_node->cost_heur = 0;

      /* "a_star_mapper.pyx":233
 *             new_node.cost_fixed = current.cost_fixed
 *             new_node.cost_heur = 0
 *             if first_interaction[gate.first] != -1 and new_node.locations[first_interaction[gate.first]] != -1:             # <<<<<<<<<<<<<<
 *                 new_node.cost_fixed += dist[new_node.locations[gate.first]][new_node.locations[first_interaction[gate.first]]]
 *             else:
 */
      __pyx_t_9 = (((__pyx_v_first_interaction[__pyx_v_gate.first]) != -1L) != 0);
      if (__pyx_t_9) {
      } else {
        __pyx_t_8 = __pyx_t_9;
        goto __pyx_L15_bool_binop_done;
      }
      __pyx_t_9 = (((__pyx_v_new_node->locations[(__pyx_v_first_interaction[__pyx_v_gate.first])]) != -1L) != 0);
      __pyx_t_8 = __pyx_t_9;
      __pyx_L15_bool_binop_done:;
      if (__pyx_t_8) {

        /* "a_star_mapper.pyx":234
 *             new_node.cost_heur = 0
 *             if first_interaction[gate.first] != -1 and new_node.locations[first_interaction[gate.first]] != -1:
 *                 new_node.cost_fixed += dist[new_node.locations[gate.first]][new_node.locations[first_interaction[gate.first]]]             # <<<<<<<<<<<<<<
 *             else:
 *                 min_dist = nqubits
 */
        __pyx_v_new_node->cost_fixed = (__pyx_v_new_node->cost_fixed + ((__pyx_v_dist[(__pyx_v_new_node->locations[__pyx_v_gate.first])])[(__pyx_v_new_node->locations[(__pyx_v_first_interaction[__pyx_v_gate.first])])]));

        /* "a_star_mapper.pyx":233
 *             new_node.cost_fixed = current.cost_fixed
 *             new_node.cost_heur = 0
 *             if first_interaction[gate.first] != -1 and new_node.locations[first_interaction[gate.first]] != -1:             # <<<<<<<<<<<<<<
 *                 new_node.cost_fixed += dist[new_node.locations[gate.first]][new_node.locations[first_interaction[gate.first]]]
 *             else:
 */
        goto __pyx_L14;
      }

      /* "a_star_mapper.pyx":236
 *                 new_node.cost_fixed += dist[new_node.locations[gate.first]][new_node.locations[first_interaction[gate.first]]]
 *             else:
 *                 min_dist = nqubits             # <<<<<<<<<<<<<<
 *                 for k in range(0, nqubits):
 *                     if new_node.qubits[k] == -1:
 */
      /*else*/ {
        __pyx_v_min_dist = __pyx_v_nqubits;

        /* "a_star_mapper.pyx":237
 *             else:
 *                 min_dist = nqubits
 *                 for k in range(0, nqubits):             # <<<<<<<<<<<<<<
 *                     if new_node.qubits[k] == -1:
 *                         min_dist = min(min_dist, dist[new_node.locations[gate.first]][k])
 */
        __pyx_t_2 = __pyx_v_nqubits;
        __pyx_t_3 = __pyx_t_2;
        for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
          __pyx_v_k = __pyx_t_4;

          /* "a_star_mapper.pyx":238
 *                 min_dist = nqubits
 *                 for k in range(0, nqubits):
 *                     if new_node.qubits[k] == -1:             # <<<<<<<<<<<<<<
 *                         min_dist = min(min_dist, dist[new_node.locations[gate.first]][k])
 *                 new_node.cost_heur += min_dist
 */
          __pyx_t_8 = (((__pyx_v_new_node->qubits[__pyx_v_k]) == -1L) != 0);
          if (__pyx_t_8) {

            /* "a_star_mapper.pyx":239
 *                 for k in range(0, nqubits):
 *                     if new_node.qubits[k] == -1:
 *                         min_dist = min(min_dist, dist[new_node.locations[gate.first]][k])             # <<<<<<<<<<<<<<
 *                 new_node.cost_heur += min_dist
 *             if first_interaction[gate.second] != -1 and new_node.locations[first_interaction[gate.second]] != -1:
 */
            __pyx_t_11 = ((__pyx_v_dist[(__pyx_v_new_node->locations[__pyx_v_gate.first])])[__pyx_v_k]);
            __pyx_t_12 = __pyx_v_min_dist;
            if (((__pyx_t_11 < __pyx_t_12) != 0)) {
              __pyx_t_13 = __pyx_t_11;
            } else {
              __pyx_t_13 = __pyx_t_12;
            }
            __pyx_v_min_dist = __pyx_t_13;

            /* "a_star_mapper.pyx":238
 *                 min_dist = nqubits
 *                 for k in range(0, nqubits):
 *                     if new_node.qubits[k] == -1:             # <<<<<<<<<<<<<<
 *                         min_dist = min(min_dist, dist[new_node.locations[gate.first]][k])
 *                 new_node.cost_heur += min_dist
 */
          }
        }

        /* "a_star_mapper.pyx":240
 *                     if new_node.qubits[k] == -1:
 *                         min_dist = min(min_dist, dist[new_node.locations[gate.first]][k])
 *                 new_node.cost_heur += min_dist             # <<<<<<<<<<<<<<
 *             if first_interaction[gate.second] != -1 and new_node.locations[first_interaction[gate.second]] != -1:
 *                 new_node.cost_fixed += dist[new_node.locations[gate.second]][new_node.locations[first_interaction[gate.second]]]
 */
        __pyx_v_new_node->cost_heur = (__pyx_v_new_node->cost_heur + __pyx_v_min_dist);
      }
      __pyx_L14:;

      /* "a_star_mapper.pyx":241
 *                         min_dist = min(min_dist, dist[new_node.locations[gate.first]][k])
 *                 new_node.cost_heur += min_dist
 *             if first_interaction[gate.second] != -1 and new_node.locations[first_interaction[gate.second]] != -1:             # <<<<<<<<<<<<<<
 *                 new_node.cost_fixed += dist[new_node.locations[gate.second]][new_node.locations[first_interaction[gate.second]]]
 *             else:
 */
      __pyx_t_9 = (((__pyx_v_first_interaction[__pyx_v_gate.second]) != -1L) != 0);
      if (__pyx_t_9) {
      } else {
        __pyx_t_8 = __pyx_t_9;
        goto __pyx_L21_bool_binop_done;
      }
      __pyx_t_9 = (((__pyx_v_new_node->locations[(__pyx_v_first_interaction[__pyx_v_gate.second])]) != -1L) != 0);
      __pyx_t_8 = __pyx_t_9;
      __pyx_L21_bool_binop_done:;
      if (__pyx_t_8) {

        /* "a_star_mapper.pyx":242
 *                 new_node.cost_heur += min_dist
 *             if first_interaction[gate.second] != -1 and new_node.locations[first_interaction[gate.second]] != -1:
 *                 new_node.cost_fixed += dist[new_node.locations[gate.second]][new_node.locations[first_interaction[gate.second]]]             # <<<<<<<<<<<<<<
 *             else:
 *                 min_dist = nqubits
 */
        __pyx_v_new_node->cost_fixed = (__pyx_v_new_node->cost_fixed + ((__pyx_v_dist[(__pyx_v_new_node->locations[__pyx_v_gate.second])])[(__pyx_v_new_node->locations[(__pyx_v_first_interaction[__pyx_v_gate.second])])]));

        /* "a_star_mapper.pyx":241
 *                         min_dist = min(min_dist, dist[new_node.locations[gate.first]][k])
 *                 new_node.cost_heur += min_dist
 *             if first_interaction[gate.second] != -1 and new_node.locations[first_interaction[gate.second]] != -1:             # <<<<<<<<<<<<<<
 *                 new_node.cost_fixed += dist[new_node.locations[gate.second]][new_node.locations[first_interaction[gate.second]]]
 *             else:
 */
        goto __pyx_L20;
      }

      /* "a_star_mapper.pyx":244
 *                 new_node.cost_fixed += dist[new_node.locations[gate.second]][new_node.locations[first_interaction[gate.second]]]
 *             else:
 *                 min_dist = nqubits             # <<<<<<<<<<<<<<
 *                 for k in range(0, nqubits):
 *                     if new_node.qubits[k] == -1:
 */
      /*else*/ {
        __pyx_v_min_dist = __pyx_v_nqubits;

        /* "a_star_mapper.pyx":245
 *             else:
 *                 min_dist = nqubits
 *                 for k in range(0, nqubits):             # <<<<<<<<<<<<<<
 *                     if new_node.qubits[k] == -1:
 *                         min_dist = min(min_dist, dist[new_node.locations[gate.second]][k])
 */
        __pyx_t_2 = __pyx_v_nqubits;
        __pyx_t_3 = __pyx_t_2;
        for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
          __pyx_v_k = __pyx_t_4;

          /* "a_star_mapper.pyx":246
 *                 min_dist = nqubits
 *                 for k in range(0, nqubits):
 *                     if new_node.qubits[k] == -1:             # <<<<<<<<<<<<<<
 *                         min_dist = min(min_dist, dist[new_node.locations[gate.second]][k])
 *                 new_node.cost_heur += min_dist
 */
          __pyx_t_8 = (((__pyx_v_new_node->qubits[__pyx_v_k]) == -1L) != 0);
          if (__pyx_t_8) {

            /* "a_star_mapper.pyx":247
 *                 for k in range(0, nqubits):
 *                     if new_node.qubits[k] == -1:
 *                         min_dist = min(min_dist, dist[new_node.locations[gate.second]][k])             # <<<<<<<<<<<<<<
 *                 new_node.cost_heur += min_dist
 * 
 */
            __pyx_t_13 = ((__pyx_v_dist[(__pyx_v_new_node->locations[__pyx_v_gate.second])])[__pyx_v_k]);
            __pyx_t_11 = __pyx_v_min_dist;
            if (((__pyx_t_13 < __pyx_t_11) != 0)) {
              __pyx_t_12 = __pyx_t_13;
            } else {
              __pyx_t_12 = __pyx_t_11;
            }
            __pyx_v_min_dist = __pyx_t_12;

            /* "a_star_mapper.pyx":246
 *                 min_dist = nqubits
 *                 for k in range(0, nqubits):
 *                     if new_node.qubits[k] == -1:             # <<<<<<<<<<<<<<
 *                         min_dist = min(min_dist, dist[new_node.locations[gate.second]][k])
 *                 new_node.cost_heur += min_dist
 */
          }
        }

        /* "a_star_mapper.pyx":248
 *                     if new_node.qubits[k] == -1:
 *                         min_dist = min(min_dist, dist[new_node.locations[gate.second]][k])
 *                 new_node.cost_heur += min_dist             # <<<<<<<<<<<<<<
 * 
 *             q.push(pair[int, uintptr_t](INT_MAX - (new_node.cost_fixed + new_node.cost_heur), <uintptr_t>new_node))
 */
        __pyx_v_new_node->cost_heur = (__pyx_v_new_node->cost_heur + __pyx_v_min_dist);
      }
      __pyx_L20:;

      /* "a_star_mapper.pyx":250
 *                 new_node.cost_heur += min_dist
 * 
 *             q.push(pair[int, uintptr_t](INT_MAX - (new_node.cost_fixed + new_node.cost_heur), <uintptr_t>new_node))             # <<<<<<<<<<<<<<
 * 
 * 
 */
      try {
        __pyx_t_7 = std::pair<int,uintptr_t> ((INT_MAX - (__pyx_v_new_node->cost_fixed + __pyx_v_new_node->cost_heur)), ((uintptr_t)__pyx_v_new_node));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 250, __pyx_L1_error)
      }
      __pyx_v_q.push(__pyx_t_7);

      /* "a_star_mapper.pyx":254
 * 
 *             # create a second new node (since there are two qubits involved)
 *             new_node = new a_star_node_initial_mapping()             # <<<<<<<<<<<<<<
 *             new_node.locations = <int*>malloc(nqubits * sizeof(int))
 *             new_node.qubits = <int*>malloc(nqubits * sizeof(int))
 */
      try {
        __pyx_t_1 = new __pyx_t_13a_star_mapper_a_star_node_initial_mapping();
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 254, __pyx_L1_error)
      }
      __pyx_v_new_node = __pyx_t_1;

      /* "a_star_mapper.pyx":255
 *             # create a second new node (since there are two qubits involved)
 *             new_node = new a_star_node_initial_mapping()
 *             new_node.locations = <int*>malloc(nqubits * sizeof(int))             # <<<<<<<<<<<<<<
 *             new_node.qubits = <int*>malloc(nqubits * sizeof(int))
 * 
 */
      __pyx_v_new_node->locations = ((int *)malloc((__pyx_v_nqubits * (sizeof(int)))));

      /* "a_star_mapper.pyx":256
 *             new_node = new a_star_node_initial_mapping()
 *             new_node.locations = <int*>malloc(nqubits * sizeof(int))
 *             new_node.qubits = <int*>malloc(nqubits * sizeof(int))             # <<<<<<<<<<<<<<
 * 
 *             # initialize the new node with the mapping of the current node
 */
      __pyx_v_new_node->qubits = ((int *)malloc((__pyx_v_nqubits * (sizeof(int)))));

      /* "a_star_mapper.pyx":259
 * 
 *             # initialize the new node with the mapping of the current node
 *             memcpy(new_node.locations, current.locations, sizeof(int) * nqubits)             # <<<<<<<<<<<<<<
 *             memcpy(new_node.qubits, current.qubits, sizeof(int) * nqubits)
 * 
 */
      (void)(memcpy(__pyx_v_new_node->locations, __pyx_v_current->locations, ((sizeof(int)) * __pyx_v_nqubits)));

      /* "a_star_mapper.pyx":260
 *             # initialize the new node with the mapping of the current node
 *             memcpy(new_node.locations, current.locations, sizeof(int) * nqubits)
 *             memcpy(new_node.qubits, current.qubits, sizeof(int) * nqubits)             # <<<<<<<<<<<<<<
 * 
 *             new_node.remaining_gates = current.remaining_gates
 */
      (void)(memcpy(__pyx_v_new_node->qubits, __pyx_v_current->qubits, ((sizeof(int)) * __pyx_v_nqubits)));

      /* "a_star_mapper.pyx":262
 *             memcpy(new_node.qubits, current.qubits, sizeof(int) * nqubits)
 * 
 *             new_node.remaining_gates = current.remaining_gates             # <<<<<<<<<<<<<<
 * 
 *             new_node.qubits[edge.second] = gate.first
 */
      __pyx_t_10 = __pyx_v_current->remaining_gates;
      __pyx_v_new_node->remaining_gates = __pyx_t_10;

      /* "a_star_mapper.pyx":264
 *             new_node.remaining_gates = current.remaining_gates
 * 
 *             new_node.qubits[edge.second] = gate.first             # <<<<<<<<<<<<<<
 *             new_node.locations[gate.first] = edge.second
 * 
 */
      __pyx_t_2 = __pyx_v_gate.first;
      (__pyx_v_new_node->qubits[__pyx_v_edge.second]) = __pyx_t_2;

      /* "a_star_mapper.pyx":265
 * 
 *             new_node.qubits[edge.second] = gate.first
 *             new_node.locations[gate.first] = edge.second             # <<<<<<<<<<<<<<
 * 
 *             new_node.qubits[edge.first] = gate.second
 */
      __pyx_t_2 = __pyx_v_edge.second;
      (__pyx_v_new_node->locations[__pyx_v_gate.first]) = __pyx_t_2;

      /* "a_star_mapper.pyx":267
 *             new_node.locations[gate.first] = edge.second
 * 
 *             new_node.qubits[edge.first] = gate.second             # <<<<<<<<<<<<<<
 *             new_node.locations[gate.second] = edge.first
 * 
 */
      __pyx_t_2 = __pyx_v_gate.second;
      (__pyx_v_new_node->qubits[__pyx_v_edge.first]) = __pyx_t_2;

      /* "a_star_mapper.pyx":268
 * 
 *             new_node.qubits[edge.first] = gate.second
 *             new_node.locations[gate.second] = edge.first             # <<<<<<<<<<<<<<
 * 
 *             new_node.cost_fixed = current.cost_fixed
 */
      __pyx_t_2 = __pyx_v_edge.first;
      (__pyx_v_new_node->locations[__pyx_v_gate.second]) = __pyx_t_2;

      /* "a_star_mapper.pyx":270
 *             new_node.locations[gate.second] = edge.first
 * 
 *             new_node.cost_fixed = current.cost_fixed             # <<<<<<<<<<<<<<
 *             new_node.cost_heur = 0
 *             if first_interaction[gate.first] != -1 and new_node.locations[first_interaction[gate.first]] != -1:
 */
      __pyx_t_2 = __pyx_v_current->cost_fixed;
      __pyx_v_new_node->cost_fixed = __pyx_t_2;

      /* "a_star_mapper.pyx":271
 * 
 *             new_node.cost_fixed = current.cost_fixed
 *             new_node.cost_heur = 0             # <<<<<<<<<<<<<<
 *             if first_interaction[gate.first] != -1 and new_node.locations[first_interaction[gate.first]] != -1:
 *                 new_node.cost_fixed += dist[new_node.locations[gate.first]][new_node.locations[first_interaction[gate.first]]]
 */
      __pyx_v_new_node->cost_heur = 0;

      /* "a_star_mapper.pyx":272
 *             new_node.cost_fixed = current.cost_fixed
 *             new_node.cost_heur = 0
 *             if first_interaction[gate.first] != -1 and new_node.locations[first_interaction[gate.first]] != -1:             # <<<<<<<<<<<<<<
 *                 new_node.cost_fixed += dist[new_node.locations[gate.first]][new_node.locations[first_interaction[gate.first]]]
 *             else:
 */
      __pyx_t_9 = (((__pyx_v_first_interaction[__pyx_v_gate.first]) != -1L) != 0);
      if (__pyx_t_9) {
      } else {
        __pyx_t_8 = __pyx_t_9;
        goto __pyx_L27_bool_binop_done;
      }
      __pyx_t_9 = (((__pyx_v_new_node->locations[(__pyx_v_first_interaction[__pyx_v_gate.first])]) != -1L) != 0);
      __pyx_t_8 = __pyx_t_9;
      __pyx_L27_bool_binop_done:;
      if (__pyx_t_8) {

        /* "a_star_mapper.pyx":273
 *             new_node.cost_heur = 0
 *             if first_interaction[gate.first] != -1 and new_node.locations[first_interaction[gate.first]] != -1:
 *                 new_node.cost_fixed += dist[new_node.locations[gate.first]][new_node.locations[first_interaction[gate.first]]]             # <<<<<<<<<<<<<<
 *             else:
 *                 min_dist = nqubits
 */
        __pyx_v_new_node->cost_fixed = (__pyx_v_new_node->cost_fixed + ((__pyx_v_dist[(__pyx_v_new_node->locations[__pyx_v_gate.first])])[(__pyx_v_new_node->locations[(__pyx_v_first_interaction[__pyx_v_gate.first])])]));

        /* "a_star_mapper.pyx":272
 *             new_node.cost_fixed = current.cost_fixed
 *             new_node.cost_heur = 0
 *             if first_interaction[gate.first] != -1 and new_node.locations[first_interaction[gate.first]] != -1:             # <<<<<<<<<<<<<<
 *                 new_node.cost_fixed += dist[new_node.locations[gate.first]][new_node.locations[first_interaction[gate.first]]]
 *             else:
 */
        goto __pyx_L26;
      }

      /* "a_star_mapper.pyx":275
 *                 new_node.cost_fixed += dist[new_node.locations[gate.first]][new_node.locations[first_interaction[gate.first]]]
 *             else:
 *                 min_dist = nqubits             # <<<<<<<<<<<<<<
 *                 for k in range(0, nqubits):
 *                     if new_node.qubits[k] == -1:
 */
      /*else*/ {
        __pyx_v_min_dist = __pyx_v_nqubits;

        /* "a_star_mapper.pyx":276
 *             else:
 *                 min_dist = nqubits
 *                 for k in range(0, nqubits):             # <<<<<<<<<<<<<<
 *                     if new_node.qubits[k] == -1:
 *                         min_dist = min(min_dist, dist[new_node.locations[gate.first]][k])
 */
        __pyx_t_2 = __pyx_v_nqubits;
        __pyx_t_3 = __pyx_t_2;
        for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
          __pyx_v_k = __pyx_t_4;

          /* "a_star_mapper.pyx":277
 *                 min_dist = nqubits
 *                 for k in range(0, nqubits):
 *                     if new_node.qubits[k] == -1:             # <<<<<<<<<<<<<<
 *                         min_dist = min(min_dist, dist[new_node.locations[gate.first]][k])
 *                 new_node.cost_heur += min_dist
 */
          __pyx_t_8 = (((__pyx_v_new_node->qubits[__pyx_v_k]) == -1L) != 0);
          if (__pyx_t_8) {

            /* "a_star_mapper.pyx":278
 *                 for k in range(0, nqubits):
 *                     if new_node.qubits[k] == -1:
 *                         min_dist = min(min_dist, dist[new_node.locations[gate.first]][k])             # <<<<<<<<<<<<<<
 *                 new_node.cost_heur += min_dist
 *             if first_interaction[gate.second] != -1 and new_node.locations[first_interaction[gate.second]] != -1:
 */
            __pyx_t_12 = ((__pyx_v_dist[(__pyx_v_new_node->locations[__pyx_v_gate.first])])[__pyx_v_k]);
            __pyx_t_13 = __pyx_v_min_dist;
            if (((__pyx_t_12 < __pyx_t_13) != 0)) {
              __pyx_t_11 = __pyx_t_12;
            } else {
              __pyx_t_11 = __pyx_t_13;
            }
            __pyx_v_min_dist = __pyx_t_11;

            /* "a_star_mapper.pyx":277
 *                 min_dist = nqubits
 *                 for k in range(0, nqubits):
 *                     if new_node.qubits[k] == -1:             # <<<<<<<<<<<<<<
 *                         min_dist = min(min_dist, dist[new_node.locations[gate.first]][k])
 *                 new_node.cost_heur += min_dist
 */
          }
        }

        /* "a_star_mapper.pyx":279
 *                     if new_node.qubits[k] == -1:
 *                         min_dist = min(min_dist, dist[new_node.locations[gate.first]][k])
 *                 new_node.cost_heur += min_dist             # <<<<<<<<<<<<<<
 *             if first_interaction[gate.second] != -1 and new_node.locations[first_interaction[gate.second]] != -1:
 *                 new_node.cost_fixed += dist[new_node.locations[gate.second]][new_node.locations[first_interaction[gate.second]]]
 */
        __pyx_v_new_node->cost_heur = (__pyx_v_new_node->cost_heur + __pyx_v_min_dist);
      }
      __pyx_L26:;

      /* "a_star_mapper.pyx":280
 *                         min_dist = min(min_dist, dist[new_node.locations[gate.first]][k])
 *                 new_node.cost_heur += min_dist
 *             if first_interaction[gate.second] != -1 and new_node.locations[first_interaction[gate.second]] != -1:             # <<<<<<<<<<<<<<
 *                 new_node.cost_fixed += dist[new_node.locations[gate.second]][new_node.locations[first_interaction[gate.second]]]
 *             else:
 */
      __pyx_t_9 = (((__pyx_v_first_interaction[__pyx_v_gate.second]) != -1L) != 0);
      if (__pyx_t_9) {
      } else {
        __pyx_t_8 = __pyx_t_9;
        goto __pyx_L33_bool_binop_done;
      }
      __pyx_t_9 = (((__pyx_v_new_node->locations[(__pyx_v_first_interaction[__pyx_v_gate.second])]) != -1L) != 0);
      __pyx_t_8 = __pyx_t_9;
      __pyx_L33_bool_binop_done:;
      if (__pyx_t_8) {

        /* "a_star_mapper.pyx":281
 *                 new_node.cost_heur += min_dist
 *             if first_interaction[gate.second] != -1 and new_node.locations[first_interaction[gate.second]] != -1:
 *                 new_node.cost_fixed += dist[new_node.locations[gate.second]][new_node.locations[first_interaction[gate.second]]]             # <<<<<<<<<<<<<<
 *             else:
 *                 min_dist = nqubits
 */
        __pyx_v_new_node->cost_fixed = (__pyx_v_new_node->cost_fixed + ((__pyx_v_dist[(__pyx_v_new_node->locations[__pyx_v_gate.second])])[(__pyx_v_new_node->locations[(__pyx_v_first_interaction[__pyx_v_gate.second])])]));

        /* "a_star_mapper.pyx":280
 *                         min_dist = min(min_dist, dist[new_node.locations[gate.first]][k])
 *                 new_node.cost_heur += min_dist
 *             if first_interaction[gate.second] != -1 and new_node.locations[first_interaction[gate.second]] != -1:             # <<<<<<<<<<<<<<
 *                 new_node.cost_fixed += dist[new_node.locations[gate.second]][new_node.locations[first_interaction[gate.second]]]
 *             else:
 */
        goto __pyx_L32;
      }

      /* "a_star_mapper.pyx":283
 *                 new_node.cost_fixed += dist[new_node.locations[gate.second]][new_node.locations[first_interaction[gate.second]]]
 *             else:
 *                 min_dist = nqubits             # <<<<<<<<<<<<<<
 *                 for k in range(0, nqubits):
 *                     if new_node.qubits[k] == -1:
 */
      /*else*/ {
        __pyx_v_min_dist = __pyx_v_nqubits;

        /* "a_star_mapper.pyx":284
 *             else:
 *                 min_dist = nqubits
 *                 for k in range(0, nqubits):             # <<<<<<<<<<<<<<
 *                     if new_node.qubits[k] == -1:
 *                         min_dist = min(min_dist, dist[new_node.locations[gate.second]][k])
 */
        __pyx_t_2 = __pyx_v_nqubits;
        __pyx_t_3 = __pyx_t_2;
        for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
          __pyx_v_k = __pyx_t_4;

          /* "a_star_mapper.pyx":285
 *                 min_dist = nqubits
 *                 for k in range(0, nqubits):
 *                     if new_node.qubits[k] == -1:             # <<<<<<<<<<<<<<
 *                         min_dist = min(min_dist, dist[new_node.locations[gate.second]][k])
 *                 new_node.cost_heur += min_dist
 */
          __pyx_t_8 = (((__pyx_v_new_node->qubits[__pyx_v_k]) == -1L) != 0);
          if (__pyx_t_8) {

            /* "a_star_mapper.pyx":286
 *                 for k in range(0, nqubits):
 *                     if new_node.qubits[k] == -1:
 *                         min_dist = min(min_dist, dist[new_node.locations[gate.second]][k])             # <<<<<<<<<<<<<<
 *                 new_node.cost_heur += min_dist
 * 
 */
            __pyx_t_11 = ((__pyx_v_dist[(__pyx_v_new_node->locations[__pyx_v_gate.second])])[__pyx_v_k]);
            __pyx_t_12 = __pyx_v_min_dist;
            if (((__pyx_t_11 < __pyx_t_12) != 0)) {
              __pyx_t_13 = __pyx_t_11;
            } else {
              __pyx_t_13 = __pyx_t_12;
            }
            __pyx_v_min_dist = __pyx_t_13;

            /* "a_star_mapper.pyx":285
 *                 min_dist = nqubits
 *                 for k in range(0, nqubits):
 *                     if new_node.qubits[k] == -1:             # <<<<<<<<<<<<<<
 *                         min_dist = min(min_dist, dist[new_node.locations[gate.second]][k])
 *                 new_node.cost_heur += min_dist
 */
          }
        }

        /* "a_star_mapper.pyx":287
 *                     if new_node.qubits[k] == -1:
 *                         min_dist = min(min_dist, dist[new_node.locations[gate.second]][k])
 *                 new_node.cost_heur += min_dist             # <<<<<<<<<<<<<<
 * 
 *             q.push(pair[int, uintptr_t](INT_MAX - (new_node.cost_fixed + new_node.cost_heur*<int>1), <uintptr_t>new_node))
 */
        __pyx_v_new_node->cost_heur = (__pyx_v_new_node->cost_heur + __pyx_v_min_dist);
      }
      __pyx_L32:;

      /* "a_star_mapper.pyx":289
 *                 new_node.cost_heur += min_dist
 * 
 *             q.push(pair[int, uintptr_t](INT_MAX - (new_node.cost_fixed + new_node.cost_heur*<int>1), <uintptr_t>new_node))             # <<<<<<<<<<<<<<
 * 
 *         # delete current node
 */
      try {
        __pyx_t_7 = std::pair<int,uintptr_t> ((INT_MAX - (__pyx_v_new_node->cost_fixed + (__pyx_v_new_node->cost_heur * ((int)1)))), ((uintptr_t)__pyx_v_new_node));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 289, __pyx_L1_error)
      }
      __pyx_v_q.push(__pyx_t_7);

      /* "a_star_mapper.pyx":210
 *         # determine all successor nodes (a gate group acting on a pair of qubits can be applied to any edge in the coupling map)
 *         # we enforce mapping these groups to an edge in the coupling map in order to avoid SWAPs before appliying the first gate
 *         for edge in coupling_graph:             # <<<<<<<<<<<<<<
 *             if current.qubits[edge.first] != -1 or current.qubits[edge.second] != -1:
 *                 continue
 */
      __pyx_L9_continue:;
    }

    /* "a_star_mapper.pyx":292
 * 
 *         # delete current node
 *         free(current.locations)             # <<<<<<<<<<<<<<
 *         free(current.qubits)
 *         del(current)
 */
    free(__pyx_v_current->locations);

    /* "a_star_mapper.pyx":293
 *         # delete current node
 *         free(current.locations)
 *         free(current.qubits)             # <<<<<<<<<<<<<<
 *         del(current)
 * 
 */
    free(__pyx_v_current->qubits);

    /* "a_star_mapper.pyx":294
 *         free(current.locations)
 *         free(current.qubits)
 *         del(current)             # <<<<<<<<<<<<<<
 * 
 *     current = <a_star_node_initial_mapping*>(q.top().second)
 */
    delete __pyx_v_current;
  }

  /* "a_star_mapper.pyx":296
 *         del(current)
 * 
 *     current = <a_star_node_initial_mapping*>(q.top().second)             # <<<<<<<<<<<<<<
 *     q.pop()
 * 
 */
  __pyx_v_current = ((__pyx_t_13a_star_mapper_a_star_node_initial_mapping *)__pyx_v_q.top().second);

  /* "a_star_mapper.pyx":297
 * 
 *     current = <a_star_node_initial_mapping*>(q.top().second)
 *     q.pop()             # <<<<<<<<<<<<<<
 * 
 *     # clean up
 */
  __pyx_v_q.pop();

  /* "a_star_mapper.pyx":300
 * 
 *     # clean up
 *     while not q.empty():             # <<<<<<<<<<<<<<
 *         new_node = <a_star_node_initial_mapping*>(q.top().second)
 *         free(new_node.locations)
 */
  while (1) {
    __pyx_t_8 = ((!(__pyx_v_q.empty() != 0)) != 0);
    if (!__pyx_t_8) break;

    /* "a_star_mapper.pyx":301
 *     # clean up
 *     while not q.empty():
 *         new_node = <a_star_node_initial_mapping*>(q.top().second)             # <<<<<<<<<<<<<<
 *         free(new_node.locations)
 *         free(new_node.qubits)
 */
    __pyx_v_new_node = ((__pyx_t_13a_star_mapper_a_star_node_initial_mapping *)__pyx_v_q.top().second);

    /* "a_star_mapper.pyx":302
 *     while not q.empty():
 *         new_node = <a_star_node_initial_mapping*>(q.top().second)
 *         free(new_node.locations)             # <<<<<<<<<<<<<<
 *         free(new_node.qubits)
 *         del(new_node)
 */
    free(__pyx_v_new_node->locations);

    /* "a_star_mapper.pyx":303
 *         new_node = <a_star_node_initial_mapping*>(q.top().second)
 *         free(new_node.locations)
 *         free(new_node.qubits)             # <<<<<<<<<<<<<<
 *         del(new_node)
 *         q.pop()
 */
    free(__pyx_v_new_node->qubits);

    /* "a_star_mapper.pyx":304
 *         free(new_node.locations)
 *         free(new_node.qubits)
 *         del(new_node)             # <<<<<<<<<<<<<<
 *         q.pop()
 *     return current
 */
    delete __pyx_v_new_node;

    /* "a_star_mapper.pyx":305
 *         free(new_node.qubits)
 *         del(new_node)
 *         q.pop()             # <<<<<<<<<<<<<<
 *     return current
 * 
 */
    __pyx_v_q.pop();
  }

  /* "a_star_mapper.pyx":306
 *         del(new_node)
 *         q.pop()
 *     return current             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_current;
  goto __pyx_L0;

  /* "a_star_mapper.pyx":179
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef a_star_node_initial_mapping* find_initial_permutation(int nqubits, set[pair[int, int]] initial_gates, int* first_interaction, int** dist, set[pair[int, int]] coupling_graph):             # <<<<<<<<<<<<<<
 *     cdef priority_queue[pair[int, uintptr_t]] q
 *     cdef a_star_node_initial_mapping* current
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("a_star_mapper.find_initial_permutation", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "a_star_mapper.pyx":312
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def a_star_mapper(grouped_gates, coupling_map, int nqubits, empty_circuit):             # <<<<<<<<<<<<<<
 *     compiled_circuit = empty_circuit
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13a_star_mapper_1a_star_mapper(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13a_star_mapper_1a_star_mapper = {"a_star_mapper", (PyCFunction)__pyx_pw_13a_star_mapper_1a_star_mapper, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_13a_star_mapper_1a_star_mapper(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_grouped_gates = 0;
  PyObject *__pyx_v_coupling_map = 0;
  int __pyx_v_nqubits;
  PyObject *__pyx_v_empty_circuit = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("a_star_mapper (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_grouped_gates,&__pyx_n_s_coupling_map,&__pyx_n_s_nqubits,&__pyx_n_s_empty_circuit,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_grouped_gates)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coupling_map)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("a_star_mapper", 1, 4, 4, 1); __PYX_ERR(0, 312, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nqubits)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("a_star_mapper", 1, 4, 4, 2); __PYX_ERR(0, 312, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_empty_circuit)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("a_star_mapper", 1, 4, 4, 3); __PYX_ERR(0, 312, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "a_star_mapper") < 0)) __PYX_ERR(0, 312, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_grouped_gates = values[0];
    __pyx_v_coupling_map = values[1];
    __pyx_v_nqubits = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_nqubits == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 312, __pyx_L3_error)
    __pyx_v_empty_circuit = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("a_star_mapper", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 312, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("a_star_mapper.a_star_mapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13a_star_mapper_a_star_mapper(__pyx_self, __pyx_v_grouped_gates, __pyx_v_coupling_map, __pyx_v_nqubits, __pyx_v_empty_circuit);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13a_star_mapper_a_star_mapper(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_grouped_gates, PyObject *__pyx_v_coupling_map, int __pyx_v_nqubits, PyObject *__pyx_v_empty_circuit) {
  PyObject *__pyx_v_compiled_circuit = NULL;
  int **__pyx_v_dist;
  int __pyx_v_i;
  std::vector<std::pair<int,int> >  __pyx_v_applied_gates;
  std::set<std::pair<int,int> >  __pyx_v_coupling_graph;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_v_v = NULL;
  int *__pyx_v_locations;
  int *__pyx_v_qubits;
  int __pyx_v_q0;
  int __pyx_v_q1;
  int __pyx_v_ii;
  int __pyx_v_iii;
  __pyx_t_13a_star_mapper_a_star_node_initial_mapping *__pyx_v_init_perm;
  std::set<std::pair<int,int> >  __pyx_v_initial_gates;
  int *__pyx_v_first_interaction;
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_v_degree = NULL;
  PyObject *__pyx_v_succ = NULL;
  std::set<std::pair<int,int> >  __pyx_v_applicable_gates;
  __pyx_t_13a_star_mapper_a_star_node_mapper *__pyx_v_result;
  std::set<int>  __pyx_v_used_qubits;
  std::set<std::pair<int,int> >  __pyx_v_free_swaps;
  PyObject *__pyx_v_nodes_to_remove = NULL;
  PyObject *__pyx_v_q = NULL;
  int __pyx_v_qq;
  int __pyx_v_min_dist;
  long __pyx_v_min_q1;
  long __pyx_v_min_q2;
  std::pair<int,int>  __pyx_v_swap;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  std::pair<int,int>  __pyx_t_14;
  int __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int *__pyx_t_17;
  int __pyx_t_18;
  int __pyx_t_19;
  int __pyx_t_20;
  int __pyx_t_21;
  __pyx_t_13a_star_mapper_a_star_node_mapper *__pyx_t_22;
  std::vector<std::pair<int,int> > ::iterator __pyx_t_23;
  std::vector<std::pair<int,int> >  *__pyx_t_24;
  __Pyx_RefNannySetupContext("a_star_mapper", 0);

  /* "a_star_mapper.pyx":313
 * @cython.wraparound(False)
 * def a_star_mapper(grouped_gates, coupling_map, int nqubits, empty_circuit):
 *     compiled_circuit = empty_circuit             # <<<<<<<<<<<<<<
 * 
 *     # Switch to C/C++ for performance reasons
 */
  __Pyx_INCREF(__pyx_v_empty_circuit);
  __pyx_v_compiled_circuit = __pyx_v_empty_circuit;

  /* "a_star_mapper.pyx":317
 *     # Switch to C/C++ for performance reasons
 * 
 *     cdef int** dist = <int**>malloc(nqubits * sizeof(int*))             # <<<<<<<<<<<<<<
 *     cdef int i,j
 *     cdef vector[pair[int, int]] applied_gates
 */
  __pyx_v_dist = ((int **)malloc((__pyx_v_nqubits * (sizeof(int *)))));

  /* "a_star_mapper.pyx":322
 * 
 *     # allocate 2-dimensional array for the distance between two physical qubits
 *     for i in range(nqubits):             # <<<<<<<<<<<<<<
 *         dist[i] = <int*>malloc(nqubits * sizeof(int))
 * 
 */
  __pyx_t_1 = __pyx_v_nqubits;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "a_star_mapper.pyx":323
 *     # allocate 2-dimensional array for the distance between two physical qubits
 *     for i in range(nqubits):
 *         dist[i] = <int*>malloc(nqubits * sizeof(int))             # <<<<<<<<<<<<<<
 * 
 *     # translate the coupling_map to a C++ set of pairs
 */
    (__pyx_v_dist[__pyx_v_i]) = ((int *)malloc((__pyx_v_nqubits * (sizeof(int)))));
  }

  /* "a_star_mapper.pyx":327
 *     # translate the coupling_map to a C++ set of pairs
 *     cdef set[pair[int, int] ] coupling_graph
 *     for key, value in coupling_map.items():             # <<<<<<<<<<<<<<
 *         for v in value:
 *             coupling_graph.insert((key, v))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_coupling_map, __pyx_n_s_items); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 327, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 327, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 327, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 327, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 327, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 327, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 327, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_8(__pyx_t_5);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 327, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 327, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_9);
      #else
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_10 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
      index = 0; __pyx_t_6 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_6)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 1; __pyx_t_9 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_9)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 2) < 0) __PYX_ERR(0, 327, __pyx_L1_error)
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L8_unpacking_done;
      __pyx_L7_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 327, __pyx_L1_error)
      __pyx_L8_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "a_star_mapper.pyx":328
 *     cdef set[pair[int, int] ] coupling_graph
 *     for key, value in coupling_map.items():
 *         for v in value:             # <<<<<<<<<<<<<<
 *             coupling_graph.insert((key, v))
 * 
 */
    if (likely(PyList_CheckExact(__pyx_v_value)) || PyTuple_CheckExact(__pyx_v_value)) {
      __pyx_t_4 = __pyx_v_value; __Pyx_INCREF(__pyx_t_4); __pyx_t_12 = 0;
      __pyx_t_13 = NULL;
    } else {
      __pyx_t_12 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_13 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 328, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_13)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_9 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_12); __Pyx_INCREF(__pyx_t_9); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 328, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_4, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 328, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        } else {
          if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_12); __Pyx_INCREF(__pyx_t_9); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 328, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_4, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 328, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        }
      } else {
        __pyx_t_9 = __pyx_t_13(__pyx_t_4);
        if (unlikely(!__pyx_t_9)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 328, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "a_star_mapper.pyx":329
 *     for key, value in coupling_map.items():
 *         for v in value:
 *             coupling_graph.insert((key, v))             # <<<<<<<<<<<<<<
 * 
 *     # determine the minimal distances between two qubits
 */
      __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 329, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_key);
      __Pyx_INCREF(__pyx_v_v);
      __Pyx_GIVEREF(__pyx_v_v);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_v);
      __pyx_t_14 = __pyx_convert_pair_from_py_int__and_int(__pyx_t_9); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 329, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      try {
        __pyx_v_coupling_graph.insert(__pyx_t_14);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 329, __pyx_L1_error)
      }

      /* "a_star_mapper.pyx":328
 *     cdef set[pair[int, int] ] coupling_graph
 *     for key, value in coupling_map.items():
 *         for v in value:             # <<<<<<<<<<<<<<
 *             coupling_graph.insert((key, v))
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "a_star_mapper.pyx":327
 *     # translate the coupling_map to a C++ set of pairs
 *     cdef set[pair[int, int] ] coupling_graph
 *     for key, value in coupling_map.items():             # <<<<<<<<<<<<<<
 *         for v in value:
 *             coupling_graph.insert((key, v))
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "a_star_mapper.pyx":332
 * 
 *     # determine the minimal distances between two qubits
 *     for i in range(nqubits):             # <<<<<<<<<<<<<<
 *         bfs(i,dist,coupling_graph)
 * 
 */
  __pyx_t_1 = __pyx_v_nqubits;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "a_star_mapper.pyx":333
 *     # determine the minimal distances between two qubits
 *     for i in range(nqubits):
 *         bfs(i,dist,coupling_graph)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (void)(__pyx_f_13a_star_mapper_bfs(__pyx_v_i, __pyx_v_dist, __pyx_v_coupling_graph));
  }

  /* "a_star_mapper.pyx":339
 *     # locations[q1] for a logical qubit q1 gives the physical qubit that q1 is mapped to
 *     # qubits[Q1] for a physical qubit Q1 gives the logaic qubit that is mapped to Q1
 *     cdef int *locations = <int*>malloc(nqubits * sizeof(int))             # <<<<<<<<<<<<<<
 *     cdef int *qubits = <int*>malloc(nqubits * sizeof(int))
 *     # start with a mapping that is initially empty (none of the logical qubits is mapped to a physical one)
 */
  __pyx_v_locations = ((int *)malloc((__pyx_v_nqubits * (sizeof(int)))));

  /* "a_star_mapper.pyx":340
 *     # qubits[Q1] for a physical qubit Q1 gives the logaic qubit that is mapped to Q1
 *     cdef int *locations = <int*>malloc(nqubits * sizeof(int))
 *     cdef int *qubits = <int*>malloc(nqubits * sizeof(int))             # <<<<<<<<<<<<<<
 *     # start with a mapping that is initially empty (none of the logical qubits is mapped to a physical one)
 *     for i in range(0, nqubits):
 */
  __pyx_v_qubits = ((int *)malloc((__pyx_v_nqubits * (sizeof(int)))));

  /* "a_star_mapper.pyx":342
 *     cdef int *qubits = <int*>malloc(nqubits * sizeof(int))
 *     # start with a mapping that is initially empty (none of the logical qubits is mapped to a physical one)
 *     for i in range(0, nqubits):             # <<<<<<<<<<<<<<
 *         locations[i] = -1
 *         qubits[i] = -1
 */
  __pyx_t_1 = __pyx_v_nqubits;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "a_star_mapper.pyx":343
 *     # start with a mapping that is initially empty (none of the logical qubits is mapped to a physical one)
 *     for i in range(0, nqubits):
 *         locations[i] = -1             # <<<<<<<<<<<<<<
 *         qubits[i] = -1
 * 
 */
    (__pyx_v_locations[__pyx_v_i]) = -1;

    /* "a_star_mapper.pyx":344
 *     for i in range(0, nqubits):
 *         locations[i] = -1
 *         qubits[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     cdef int q0, q1, ii, iii
 */
    (__pyx_v_qubits[__pyx_v_i]) = -1;
  }

  /* "a_star_mapper.pyx":352
 *     cdef int* first_interaction
 *     # search for "best initial mapping" (regarding a certain heuristic) using an A* search algorithm. This is only feasable for a small number of qubits
 *     if nqubits <= 8:             # <<<<<<<<<<<<<<
 *         first_interaction = <int*>malloc(nqubits * sizeof(int))
 * 
 */
  __pyx_t_15 = ((__pyx_v_nqubits <= 8) != 0);
  if (__pyx_t_15) {

    /* "a_star_mapper.pyx":353
 *     # search for "best initial mapping" (regarding a certain heuristic) using an A* search algorithm. This is only feasable for a small number of qubits
 *     if nqubits <= 8:
 *         first_interaction = <int*>malloc(nqubits * sizeof(int))             # <<<<<<<<<<<<<<
 * 
 *         for i in range(0, nqubits):
 */
    __pyx_v_first_interaction = ((int *)malloc((__pyx_v_nqubits * (sizeof(int)))));

    /* "a_star_mapper.pyx":355
 *         first_interaction = <int*>malloc(nqubits * sizeof(int))
 * 
 *         for i in range(0, nqubits):             # <<<<<<<<<<<<<<
 *             first_interaction[i] = -1
 * 
 */
    __pyx_t_1 = __pyx_v_nqubits;
    __pyx_t_2 = __pyx_t_1;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "a_star_mapper.pyx":356
 * 
 *         for i in range(0, nqubits):
 *             first_interaction[i] = -1             # <<<<<<<<<<<<<<
 * 
 *         for node in grouped_gates.nodes:
 */
      (__pyx_v_first_interaction[__pyx_v_i]) = -1;
    }

    /* "a_star_mapper.pyx":358
 *             first_interaction[i] = -1
 * 
 *         for node in grouped_gates.nodes:             # <<<<<<<<<<<<<<
 *             degree = grouped_gates.in_degree(node)
 *             if degree == 0:
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_grouped_gates, __pyx_n_s_nodes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 358, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 358, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 358, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 358, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 358, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 358, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_8(__pyx_t_4);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 358, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "a_star_mapper.pyx":359
 * 
 *         for node in grouped_gates.nodes:
 *             degree = grouped_gates.in_degree(node)             # <<<<<<<<<<<<<<
 *             if degree == 0:
 *                 if len(grouped_gates.node[node]['qubits']) == 2:
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_grouped_gates, __pyx_n_s_in_degree); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 359, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      if (!__pyx_t_6) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_node); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 359, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_node};
          __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 359, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_5);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_node};
          __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 359, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_5);
        } else
        #endif
        {
          __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 359, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_6); __pyx_t_6 = NULL;
          __Pyx_INCREF(__pyx_v_node);
          __Pyx_GIVEREF(__pyx_v_node);
          PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_v_node);
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_10, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 359, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF_SET(__pyx_v_degree, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "a_star_mapper.pyx":360
 *         for node in grouped_gates.nodes:
 *             degree = grouped_gates.in_degree(node)
 *             if degree == 0:             # <<<<<<<<<<<<<<
 *                 if len(grouped_gates.node[node]['qubits']) == 2:
 *                     q0 = grouped_gates.node[node]['qubits'][0]
 */
      __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_v_degree, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 360, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 360, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_15) {

        /* "a_star_mapper.pyx":361
 *             degree = grouped_gates.in_degree(node)
 *             if degree == 0:
 *                 if len(grouped_gates.node[node]['qubits']) == 2:             # <<<<<<<<<<<<<<
 *                     q0 = grouped_gates.node[node]['qubits'][0]
 *                     q1 = grouped_gates.node[node]['qubits'][1]
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_grouped_gates, __pyx_n_s_node); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_v_node); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_9, __pyx_n_s_qubits); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_12 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_15 = ((__pyx_t_12 == 2) != 0);
        if (__pyx_t_15) {

          /* "a_star_mapper.pyx":362
 *             if degree == 0:
 *                 if len(grouped_gates.node[node]['qubits']) == 2:
 *                     q0 = grouped_gates.node[node]['qubits'][0]             # <<<<<<<<<<<<<<
 *                     q1 = grouped_gates.node[node]['qubits'][1]
 *                     # the mapping for all gates in the first layer shall be satified
 */
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_grouped_gates, __pyx_n_s_node); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 362, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_v_node); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 362, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_9, __pyx_n_s_qubits); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 362, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 362, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 362, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_v_q0 = __pyx_t_1;

          /* "a_star_mapper.pyx":363
 *                 if len(grouped_gates.node[node]['qubits']) == 2:
 *                     q0 = grouped_gates.node[node]['qubits'][0]
 *                     q1 = grouped_gates.node[node]['qubits'][1]             # <<<<<<<<<<<<<<
 *                     # the mapping for all gates in the first layer shall be satified
 *                     initial_gates.insert(pair[int, int](q0, q1))
 */
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_grouped_gates, __pyx_n_s_node); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 363, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_9, __pyx_v_node); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 363, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_qubits); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 363, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_9, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 363, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 363, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_v_q1 = __pyx_t_1;

          /* "a_star_mapper.pyx":365
 *                     q1 = grouped_gates.node[node]['qubits'][1]
 *                     # the mapping for all gates in the first layer shall be satified
 *                     initial_gates.insert(pair[int, int](q0, q1))             # <<<<<<<<<<<<<<
 *                     # determine the qubit with which q0 and q1 interact next
 *                     for succ in grouped_gates.successors(node):
 */
          try {
            __pyx_t_14 = std::pair<int,int> (__pyx_v_q0, __pyx_v_q1);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 365, __pyx_L1_error)
          }
          try {
            __pyx_v_initial_gates.insert(__pyx_t_14);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 365, __pyx_L1_error)
          }

          /* "a_star_mapper.pyx":367
 *                     initial_gates.insert(pair[int, int](q0, q1))
 *                     # determine the qubit with which q0 and q1 interact next
 *                     for succ in grouped_gates.successors(node):             # <<<<<<<<<<<<<<
 *                         if q0 == grouped_gates.node[succ]['qubits'][0]:
 *                             first_interaction[grouped_gates.node[succ]['qubits'][1]] = q0
 */
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_grouped_gates, __pyx_n_s_successors); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 367, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
            }
          }
          if (!__pyx_t_10) {
            __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_node); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 367, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
          } else {
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_9)) {
              PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_v_node};
              __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 367, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_GOTREF(__pyx_t_5);
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
              PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_v_node};
              __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 367, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_GOTREF(__pyx_t_5);
            } else
            #endif
            {
              __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 367, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_10); __pyx_t_10 = NULL;
              __Pyx_INCREF(__pyx_v_node);
              __Pyx_GIVEREF(__pyx_v_node);
              PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_node);
              __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 367, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            }
          }
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
            __pyx_t_9 = __pyx_t_5; __Pyx_INCREF(__pyx_t_9); __pyx_t_12 = 0;
            __pyx_t_13 = NULL;
          } else {
            __pyx_t_12 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 367, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_13 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 367, __pyx_L1_error)
          }
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          for (;;) {
            if (likely(!__pyx_t_13)) {
              if (likely(PyList_CheckExact(__pyx_t_9))) {
                if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_9)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_5 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_12); __Pyx_INCREF(__pyx_t_5); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 367, __pyx_L1_error)
                #else
                __pyx_t_5 = PySequence_ITEM(__pyx_t_9, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 367, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_5);
                #endif
              } else {
                if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_12); __Pyx_INCREF(__pyx_t_5); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 367, __pyx_L1_error)
                #else
                __pyx_t_5 = PySequence_ITEM(__pyx_t_9, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 367, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_5);
                #endif
              }
            } else {
              __pyx_t_5 = __pyx_t_13(__pyx_t_9);
              if (unlikely(!__pyx_t_5)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 367, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_5);
            }
            __Pyx_XDECREF_SET(__pyx_v_succ, __pyx_t_5);
            __pyx_t_5 = 0;

            /* "a_star_mapper.pyx":368
 *                     # determine the qubit with which q0 and q1 interact next
 *                     for succ in grouped_gates.successors(node):
 *                         if q0 == grouped_gates.node[succ]['qubits'][0]:             # <<<<<<<<<<<<<<
 *                             first_interaction[grouped_gates.node[succ]['qubits'][1]] = q0
 *                         elif q0 == grouped_gates.node[succ]['qubits'][1]:
 */
            __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_q0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 368, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_grouped_gates, __pyx_n_s_node); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 368, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_10 = __Pyx_PyObject_GetItem(__pyx_t_6, __pyx_v_succ); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 368, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_t_10, __pyx_n_s_qubits); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 368, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 368, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_t_6 = PyObject_RichCompare(__pyx_t_5, __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 368, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 368, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (__pyx_t_15) {

              /* "a_star_mapper.pyx":369
 *                     for succ in grouped_gates.successors(node):
 *                         if q0 == grouped_gates.node[succ]['qubits'][0]:
 *                             first_interaction[grouped_gates.node[succ]['qubits'][1]] = q0             # <<<<<<<<<<<<<<
 *                         elif q0 == grouped_gates.node[succ]['qubits'][1]:
 *                             first_interaction[grouped_gates.node[succ]['qubits'][0]] = q0
 */
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_grouped_gates, __pyx_n_s_node); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 369, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_10 = __Pyx_PyObject_GetItem(__pyx_t_6, __pyx_v_succ); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 369, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_t_10, __pyx_n_s_qubits); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 369, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_6, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 369, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_t_10); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 369, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              (__pyx_v_first_interaction[__pyx_t_16]) = __pyx_v_q0;

              /* "a_star_mapper.pyx":368
 *                     # determine the qubit with which q0 and q1 interact next
 *                     for succ in grouped_gates.successors(node):
 *                         if q0 == grouped_gates.node[succ]['qubits'][0]:             # <<<<<<<<<<<<<<
 *                             first_interaction[grouped_gates.node[succ]['qubits'][1]] = q0
 *                         elif q0 == grouped_gates.node[succ]['qubits'][1]:
 */
              goto __pyx_L24;
            }

            /* "a_star_mapper.pyx":370
 *                         if q0 == grouped_gates.node[succ]['qubits'][0]:
 *                             first_interaction[grouped_gates.node[succ]['qubits'][1]] = q0
 *                         elif q0 == grouped_gates.node[succ]['qubits'][1]:             # <<<<<<<<<<<<<<
 *                             first_interaction[grouped_gates.node[succ]['qubits'][0]] = q0
 *                         elif q1 == grouped_gates.node[succ]['qubits'][0]:
 */
            __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_q0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 370, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_grouped_gates, __pyx_n_s_node); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 370, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_6, __pyx_v_succ); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 370, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_qubits); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 370, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_6, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 370, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_t_6 = PyObject_RichCompare(__pyx_t_10, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 370, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 370, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (__pyx_t_15) {

              /* "a_star_mapper.pyx":371
 *                             first_interaction[grouped_gates.node[succ]['qubits'][1]] = q0
 *                         elif q0 == grouped_gates.node[succ]['qubits'][1]:
 *                             first_interaction[grouped_gates.node[succ]['qubits'][0]] = q0             # <<<<<<<<<<<<<<
 *                         elif q1 == grouped_gates.node[succ]['qubits'][0]:
 *                             first_interaction[grouped_gates.node[succ]['qubits'][1]] = q1
 */
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_grouped_gates, __pyx_n_s_node); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 371, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_6, __pyx_v_succ); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 371, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_qubits); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 371, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 371, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 371, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              (__pyx_v_first_interaction[__pyx_t_16]) = __pyx_v_q0;

              /* "a_star_mapper.pyx":370
 *                         if q0 == grouped_gates.node[succ]['qubits'][0]:
 *                             first_interaction[grouped_gates.node[succ]['qubits'][1]] = q0
 *                         elif q0 == grouped_gates.node[succ]['qubits'][1]:             # <<<<<<<<<<<<<<
 *                             first_interaction[grouped_gates.node[succ]['qubits'][0]] = q0
 *                         elif q1 == grouped_gates.node[succ]['qubits'][0]:
 */
              goto __pyx_L24;
            }

            /* "a_star_mapper.pyx":372
 *                         elif q0 == grouped_gates.node[succ]['qubits'][1]:
 *                             first_interaction[grouped_gates.node[succ]['qubits'][0]] = q0
 *                         elif q1 == grouped_gates.node[succ]['qubits'][0]:             # <<<<<<<<<<<<<<
 *                             first_interaction[grouped_gates.node[succ]['qubits'][1]] = q1
 *                         elif q1 == grouped_gates.node[succ]['qubits'][1]:
 */
            __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_q1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 372, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_grouped_gates, __pyx_n_s_node); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 372, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_10 = __Pyx_PyObject_GetItem(__pyx_t_6, __pyx_v_succ); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 372, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_t_10, __pyx_n_s_qubits); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 372, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 372, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_t_6 = PyObject_RichCompare(__pyx_t_5, __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 372, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 372, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (__pyx_t_15) {

              /* "a_star_mapper.pyx":373
 *                             first_interaction[grouped_gates.node[succ]['qubits'][0]] = q0
 *                         elif q1 == grouped_gates.node[succ]['qubits'][0]:
 *                             first_interaction[grouped_gates.node[succ]['qubits'][1]] = q1             # <<<<<<<<<<<<<<
 *                         elif q1 == grouped_gates.node[succ]['qubits'][1]:
 *                             first_interaction[grouped_gates.node[succ]['qubits'][0]] = q1
 */
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_grouped_gates, __pyx_n_s_node); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 373, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_10 = __Pyx_PyObject_GetItem(__pyx_t_6, __pyx_v_succ); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 373, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_t_10, __pyx_n_s_qubits); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 373, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_6, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 373, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_t_10); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 373, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              (__pyx_v_first_interaction[__pyx_t_16]) = __pyx_v_q1;

              /* "a_star_mapper.pyx":372
 *                         elif q0 == grouped_gates.node[succ]['qubits'][1]:
 *                             first_interaction[grouped_gates.node[succ]['qubits'][0]] = q0
 *                         elif q1 == grouped_gates.node[succ]['qubits'][0]:             # <<<<<<<<<<<<<<
 *                             first_interaction[grouped_gates.node[succ]['qubits'][1]] = q1
 *                         elif q1 == grouped_gates.node[succ]['qubits'][1]:
 */
              goto __pyx_L24;
            }

            /* "a_star_mapper.pyx":374
 *                         elif q1 == grouped_gates.node[succ]['qubits'][0]:
 *                             first_interaction[grouped_gates.node[succ]['qubits'][1]] = q1
 *                         elif q1 == grouped_gates.node[succ]['qubits'][1]:             # <<<<<<<<<<<<<<
 *                             first_interaction[grouped_gates.node[succ]['qubits'][0]] = q1
 * 
 */
            __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_q1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 374, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_grouped_gates, __pyx_n_s_node); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 374, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_6, __pyx_v_succ); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 374, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_qubits); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 374, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_6, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 374, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_t_6 = PyObject_RichCompare(__pyx_t_10, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 374, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 374, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (__pyx_t_15) {

              /* "a_star_mapper.pyx":375
 *                             first_interaction[grouped_gates.node[succ]['qubits'][1]] = q1
 *                         elif q1 == grouped_gates.node[succ]['qubits'][1]:
 *                             first_interaction[grouped_gates.node[succ]['qubits'][0]] = q1             # <<<<<<<<<<<<<<
 * 
 *         # call an A* algorithm to determe the best initial mapping
 */
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_grouped_gates, __pyx_n_s_node); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 375, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_6, __pyx_v_succ); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 375, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_qubits); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 375, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 375, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 375, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              (__pyx_v_first_interaction[__pyx_t_16]) = __pyx_v_q1;

              /* "a_star_mapper.pyx":374
 *                         elif q1 == grouped_gates.node[succ]['qubits'][0]:
 *                             first_interaction[grouped_gates.node[succ]['qubits'][1]] = q1
 *                         elif q1 == grouped_gates.node[succ]['qubits'][1]:             # <<<<<<<<<<<<<<
 *                             first_interaction[grouped_gates.node[succ]['qubits'][0]] = q1
 * 
 */
            }
            __pyx_L24:;

            /* "a_star_mapper.pyx":367
 *                     initial_gates.insert(pair[int, int](q0, q1))
 *                     # determine the qubit with which q0 and q1 interact next
 *                     for succ in grouped_gates.successors(node):             # <<<<<<<<<<<<<<
 *                         if q0 == grouped_gates.node[succ]['qubits'][0]:
 *                             first_interaction[grouped_gates.node[succ]['qubits'][1]] = q0
 */
          }
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

          /* "a_star_mapper.pyx":361
 *             degree = grouped_gates.in_degree(node)
 *             if degree == 0:
 *                 if len(grouped_gates.node[node]['qubits']) == 2:             # <<<<<<<<<<<<<<
 *                     q0 = grouped_gates.node[node]['qubits'][0]
 *                     q1 = grouped_gates.node[node]['qubits'][1]
 */
        }

        /* "a_star_mapper.pyx":360
 *         for node in grouped_gates.nodes:
 *             degree = grouped_gates.in_degree(node)
 *             if degree == 0:             # <<<<<<<<<<<<<<
 *                 if len(grouped_gates.node[node]['qubits']) == 2:
 *                     q0 = grouped_gates.node[node]['qubits'][0]
 */
      }

      /* "a_star_mapper.pyx":358
 *             first_interaction[i] = -1
 * 
 *         for node in grouped_gates.nodes:             # <<<<<<<<<<<<<<
 *             degree = grouped_gates.in_degree(node)
 *             if degree == 0:
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "a_star_mapper.pyx":378
 * 
 *         # call an A* algorithm to determe the best initial mapping
 *         init_perm = find_initial_permutation(nqubits, initial_gates, first_interaction, dist, coupling_graph)             # <<<<<<<<<<<<<<
 * 
 *         free(locations)
 */
    __pyx_v_init_perm = __pyx_f_13a_star_mapper_find_initial_permutation(__pyx_v_nqubits, __pyx_v_initial_gates, __pyx_v_first_interaction, __pyx_v_dist, __pyx_v_coupling_graph);

    /* "a_star_mapper.pyx":380
 *         init_perm = find_initial_permutation(nqubits, initial_gates, first_interaction, dist, coupling_graph)
 * 
 *         free(locations)             # <<<<<<<<<<<<<<
 *         locations = init_perm.locations
 *         free(qubits)
 */
    free(__pyx_v_locations);

    /* "a_star_mapper.pyx":381
 * 
 *         free(locations)
 *         locations = init_perm.locations             # <<<<<<<<<<<<<<
 *         free(qubits)
 *         qubits = init_perm.qubits
 */
    __pyx_t_17 = __pyx_v_init_perm->locations;
    __pyx_v_locations = __pyx_t_17;

    /* "a_star_mapper.pyx":382
 *         free(locations)
 *         locations = init_perm.locations
 *         free(qubits)             # <<<<<<<<<<<<<<
 *         qubits = init_perm.qubits
 *         free(first_interaction)
 */
    free(__pyx_v_qubits);

    /* "a_star_mapper.pyx":383
 *         locations = init_perm.locations
 *         free(qubits)
 *         qubits = init_perm.qubits             # <<<<<<<<<<<<<<
 *         free(first_interaction)
 *         del(init_perm)
 */
    __pyx_t_17 = __pyx_v_init_perm->qubits;
    __pyx_v_qubits = __pyx_t_17;

    /* "a_star_mapper.pyx":384
 *         free(qubits)
 *         qubits = init_perm.qubits
 *         free(first_interaction)             # <<<<<<<<<<<<<<
 *         del(init_perm)
 * 
 */
    free(__pyx_v_first_interaction);

    /* "a_star_mapper.pyx":385
 *         qubits = init_perm.qubits
 *         free(first_interaction)
 *         del(init_perm)             # <<<<<<<<<<<<<<
 * 
 *     cdef set[pair[int, int]] applicable_gates
 */
    delete __pyx_v_init_perm;

    /* "a_star_mapper.pyx":352
 *     cdef int* first_interaction
 *     # search for "best initial mapping" (regarding a certain heuristic) using an A* search algorithm. This is only feasable for a small number of qubits
 *     if nqubits <= 8:             # <<<<<<<<<<<<<<
 *         first_interaction = <int*>malloc(nqubits * sizeof(int))
 * 
 */
  }

  /* "a_star_mapper.pyx":394
 * 
 *     # conduct the mapping of the circuit
 *     while grouped_gates.order() > 0:             # <<<<<<<<<<<<<<
 *         # add all gates that can be directly applied to the circuit
 *         while True:
 */
  while (1) {
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_grouped_gates, __pyx_n_s_order); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 394, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 394, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyObject_RichCompare(__pyx_t_4, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 394, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 394, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (!__pyx_t_15) break;

    /* "a_star_mapper.pyx":396
 *     while grouped_gates.order() > 0:
 *         # add all gates that can be directly applied to the circuit
 *         while True:             # <<<<<<<<<<<<<<
 *             applicable_gates.clear()
 *             nodes_to_remove = []
 */
    while (1) {

      /* "a_star_mapper.pyx":397
 *         # add all gates that can be directly applied to the circuit
 *         while True:
 *             applicable_gates.clear()             # <<<<<<<<<<<<<<
 *             nodes_to_remove = []
 *             for node in grouped_gates.nodes:
 */
      __pyx_v_applicable_gates.clear();

      /* "a_star_mapper.pyx":398
 *         while True:
 *             applicable_gates.clear()
 *             nodes_to_remove = []             # <<<<<<<<<<<<<<
 *             for node in grouped_gates.nodes:
 *                 degree = grouped_gates.in_degree(node)
 */
      __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 398, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_XDECREF_SET(__pyx_v_nodes_to_remove, ((PyObject*)__pyx_t_9));
      __pyx_t_9 = 0;

      /* "a_star_mapper.pyx":399
 *             applicable_gates.clear()
 *             nodes_to_remove = []
 *             for node in grouped_gates.nodes:             # <<<<<<<<<<<<<<
 *                 degree = grouped_gates.in_degree(node)
 *                 if degree == 0:
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_grouped_gates, __pyx_n_s_nodes); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 399, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
        __pyx_t_4 = __pyx_t_9; __Pyx_INCREF(__pyx_t_4); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 399, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_8 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 399, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      for (;;) {
        if (likely(!__pyx_t_8)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_9 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 399, __pyx_L1_error)
            #else
            __pyx_t_9 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 399, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            #endif
          } else {
            if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 399, __pyx_L1_error)
            #else
            __pyx_t_9 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 399, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            #endif
          }
        } else {
          __pyx_t_9 = __pyx_t_8(__pyx_t_4);
          if (unlikely(!__pyx_t_9)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 399, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_9);
        }
        __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "a_star_mapper.pyx":400
 *             nodes_to_remove = []
 *             for node in grouped_gates.nodes:
 *                 degree = grouped_gates.in_degree(node)             # <<<<<<<<<<<<<<
 *                 if degree == 0:
 *                     if len(grouped_gates.node[node]['qubits']) != 2:
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_grouped_gates, __pyx_n_s_in_degree); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 400, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        if (!__pyx_t_6) {
          __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_node); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 400, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_5)) {
            PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_node};
            __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 400, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_GOTREF(__pyx_t_9);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
            PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_node};
            __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 400, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_GOTREF(__pyx_t_9);
          } else
          #endif
          {
            __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 400, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_6); __pyx_t_6 = NULL;
            __Pyx_INCREF(__pyx_v_node);
            __Pyx_GIVEREF(__pyx_v_node);
            PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_v_node);
            __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 400, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF_SET(__pyx_v_degree, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "a_star_mapper.pyx":401
 *             for node in grouped_gates.nodes:
 *                 degree = grouped_gates.in_degree(node)
 *                 if degree == 0:             # <<<<<<<<<<<<<<
 *                     if len(grouped_gates.node[node]['qubits']) != 2:
 *                         # add measurement and barrier gates to the compiled circuit
 */
        __pyx_t_9 = __Pyx_PyInt_EqObjC(__pyx_v_degree, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 401, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 401, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (__pyx_t_15) {

          /* "a_star_mapper.pyx":402
 *                 degree = grouped_gates.in_degree(node)
 *                 if degree == 0:
 *                     if len(grouped_gates.node[node]['qubits']) != 2:             # <<<<<<<<<<<<<<
 *                         # add measurement and barrier gates to the compiled circuit
 *                         for q in grouped_gates.node[node]['qubits']:
 */
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_grouped_gates, __pyx_n_s_node); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 402, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_9, __pyx_v_node); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 402, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_qubits); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 402, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_12 = PyObject_Length(__pyx_t_9); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 402, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_15 = ((__pyx_t_12 != 2) != 0);
          if (__pyx_t_15) {

            /* "a_star_mapper.pyx":404
 *                     if len(grouped_gates.node[node]['qubits']) != 2:
 *                         # add measurement and barrier gates to the compiled circuit
 *                         for q in grouped_gates.node[node]['qubits']:             # <<<<<<<<<<<<<<
 *                             for qq in range(nqubits):
 *                                 if locations[qq] == -1:
 */
            __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_grouped_gates, __pyx_n_s_node); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 404, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_9, __pyx_v_node); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 404, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_9 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_qubits); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 404, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
              __pyx_t_5 = __pyx_t_9; __Pyx_INCREF(__pyx_t_5); __pyx_t_12 = 0;
              __pyx_t_13 = NULL;
            } else {
              __pyx_t_12 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 404, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_13 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 404, __pyx_L1_error)
            }
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            for (;;) {
              if (likely(!__pyx_t_13)) {
                if (likely(PyList_CheckExact(__pyx_t_5))) {
                  if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_9 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_12); __Pyx_INCREF(__pyx_t_9); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 404, __pyx_L1_error)
                  #else
                  __pyx_t_9 = PySequence_ITEM(__pyx_t_5, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 404, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  #endif
                } else {
                  if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_12); __Pyx_INCREF(__pyx_t_9); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 404, __pyx_L1_error)
                  #else
                  __pyx_t_9 = PySequence_ITEM(__pyx_t_5, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 404, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  #endif
                }
              } else {
                __pyx_t_9 = __pyx_t_13(__pyx_t_5);
                if (unlikely(!__pyx_t_9)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 404, __pyx_L1_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_9);
              }
              __Pyx_XDECREF_SET(__pyx_v_q, __pyx_t_9);
              __pyx_t_9 = 0;

              /* "a_star_mapper.pyx":405
 *                         # add measurement and barrier gates to the compiled circuit
 *                         for q in grouped_gates.node[node]['qubits']:
 *                             for qq in range(nqubits):             # <<<<<<<<<<<<<<
 *                                 if locations[qq] == -1:
 *                                     locations[qq] = q
 */
              __pyx_t_1 = __pyx_v_nqubits;
              __pyx_t_2 = __pyx_t_1;
              for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
                __pyx_v_qq = __pyx_t_3;

                /* "a_star_mapper.pyx":406
 *                         for q in grouped_gates.node[node]['qubits']:
 *                             for qq in range(nqubits):
 *                                 if locations[qq] == -1:             # <<<<<<<<<<<<<<
 *                                     locations[qq] = q
 *                                     qubits[q] = qq
 */
                __pyx_t_15 = (((__pyx_v_locations[__pyx_v_qq]) == -1L) != 0);
                if (__pyx_t_15) {

                  /* "a_star_mapper.pyx":407
 *                             for qq in range(nqubits):
 *                                 if locations[qq] == -1:
 *                                     locations[qq] = q             # <<<<<<<<<<<<<<
 *                                     qubits[q] = qq
 *                                     break
 */
                  __pyx_t_18 = __Pyx_PyInt_As_int(__pyx_v_q); if (unlikely((__pyx_t_18 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 407, __pyx_L1_error)
                  (__pyx_v_locations[__pyx_v_qq]) = __pyx_t_18;

                  /* "a_star_mapper.pyx":408
 *                                 if locations[qq] == -1:
 *                                     locations[qq] = q
 *                                     qubits[q] = qq             # <<<<<<<<<<<<<<
 *                                     break
 *                         compiled_circuit = add_rewritten_gates(grouped_gates.node[node]['gates'], locations, compiled_circuit)
 */
                  __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_v_q); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 408, __pyx_L1_error)
                  (__pyx_v_qubits[__pyx_t_16]) = __pyx_v_qq;

                  /* "a_star_mapper.pyx":409
 *                                     locations[qq] = q
 *                                     qubits[q] = qq
 *                                     break             # <<<<<<<<<<<<<<
 *                         compiled_circuit = add_rewritten_gates(grouped_gates.node[node]['gates'], locations, compiled_circuit)
 *                         nodes_to_remove += [node]
 */
                  goto __pyx_L36_break;

                  /* "a_star_mapper.pyx":406
 *                         for q in grouped_gates.node[node]['qubits']:
 *                             for qq in range(nqubits):
 *                                 if locations[qq] == -1:             # <<<<<<<<<<<<<<
 *                                     locations[qq] = q
 *                                     qubits[q] = qq
 */
                }
              }
              __pyx_L36_break:;

              /* "a_star_mapper.pyx":404
 *                     if len(grouped_gates.node[node]['qubits']) != 2:
 *                         # add measurement and barrier gates to the compiled circuit
 *                         for q in grouped_gates.node[node]['qubits']:             # <<<<<<<<<<<<<<
 *                             for qq in range(nqubits):
 *                                 if locations[qq] == -1:
 */
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "a_star_mapper.pyx":410
 *                                     qubits[q] = qq
 *                                     break
 *                         compiled_circuit = add_rewritten_gates(grouped_gates.node[node]['gates'], locations, compiled_circuit)             # <<<<<<<<<<<<<<
 *                         nodes_to_remove += [node]
 *                     else:
 */
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_grouped_gates, __pyx_n_s_node); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 410, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_v_node); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 410, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_9, __pyx_n_s_gates); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 410, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_9 = __pyx_f_13a_star_mapper_add_rewritten_gates(__pyx_t_5, __pyx_v_locations, __pyx_v_compiled_circuit); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 410, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF_SET(__pyx_v_compiled_circuit, __pyx_t_9);
            __pyx_t_9 = 0;

            /* "a_star_mapper.pyx":411
 *                                     break
 *                         compiled_circuit = add_rewritten_gates(grouped_gates.node[node]['gates'], locations, compiled_circuit)
 *                         nodes_to_remove += [node]             # <<<<<<<<<<<<<<
 *                     else:
 *                         # map all yet unmapped qubits that occur in gates that can be applied
 */
            __pyx_t_9 = PyList_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 411, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_INCREF(__pyx_v_node);
            __Pyx_GIVEREF(__pyx_v_node);
            PyList_SET_ITEM(__pyx_t_9, 0, __pyx_v_node);
            __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_nodes_to_remove, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 411, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF_SET(__pyx_v_nodes_to_remove, ((PyObject*)__pyx_t_5));
            __pyx_t_5 = 0;

            /* "a_star_mapper.pyx":402
 *                 degree = grouped_gates.in_degree(node)
 *                 if degree == 0:
 *                     if len(grouped_gates.node[node]['qubits']) != 2:             # <<<<<<<<<<<<<<
 *                         # add measurement and barrier gates to the compiled circuit
 *                         for q in grouped_gates.node[node]['qubits']:
 */
            goto __pyx_L32;
          }

          /* "a_star_mapper.pyx":415
 *                         # map all yet unmapped qubits that occur in gates that can be applied
 * 
 *                         q0 = grouped_gates.node[node]['qubits'][0]             # <<<<<<<<<<<<<<
 *                         q1 = grouped_gates.node[node]['qubits'][1]
 * 
 */
          /*else*/ {
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_grouped_gates, __pyx_n_s_node); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 415, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_v_node); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 415, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_9, __pyx_n_s_qubits); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 415, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 415, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 415, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_v_q0 = __pyx_t_1;

            /* "a_star_mapper.pyx":416
 * 
 *                         q0 = grouped_gates.node[node]['qubits'][0]
 *                         q1 = grouped_gates.node[node]['qubits'][1]             # <<<<<<<<<<<<<<
 * 
 *                         if locations[q0] == -1 and locations[q1] == -1:
 */
            __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_grouped_gates, __pyx_n_s_node); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 416, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_9, __pyx_v_node); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 416, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_9 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_qubits); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 416, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_9, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 416, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 416, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_v_q1 = __pyx_t_1;

            /* "a_star_mapper.pyx":418
 *                         q1 = grouped_gates.node[node]['qubits'][1]
 * 
 *                         if locations[q0] == -1 and locations[q1] == -1:             # <<<<<<<<<<<<<<
 *                             # case: both qubits are not yet mapped
 *                             min_dist = nqubits
 */
            __pyx_t_19 = (((__pyx_v_locations[__pyx_v_q0]) == -1L) != 0);
            if (__pyx_t_19) {
            } else {
              __pyx_t_15 = __pyx_t_19;
              goto __pyx_L39_bool_binop_done;
            }
            __pyx_t_19 = (((__pyx_v_locations[__pyx_v_q1]) == -1L) != 0);
            __pyx_t_15 = __pyx_t_19;
            __pyx_L39_bool_binop_done:;
            if (__pyx_t_15) {

              /* "a_star_mapper.pyx":420
 *                         if locations[q0] == -1 and locations[q1] == -1:
 *                             # case: both qubits are not yet mapped
 *                             min_dist = nqubits             # <<<<<<<<<<<<<<
 *                             min_q1 = -1
 *                             min_q2 = -1
 */
              __pyx_v_min_dist = __pyx_v_nqubits;

              /* "a_star_mapper.pyx":421
 *                             # case: both qubits are not yet mapped
 *                             min_dist = nqubits
 *                             min_q1 = -1             # <<<<<<<<<<<<<<
 *                             min_q2 = -1
 *                             # find best initial mapping
 */
              __pyx_v_min_q1 = -1L;

              /* "a_star_mapper.pyx":422
 *                             min_dist = nqubits
 *                             min_q1 = -1
 *                             min_q2 = -1             # <<<<<<<<<<<<<<
 *                             # find best initial mapping
 *                             for ii in range(nqubits):
 */
              __pyx_v_min_q2 = -1L;

              /* "a_star_mapper.pyx":424
 *                             min_q2 = -1
 *                             # find best initial mapping
 *                             for ii in range(nqubits):             # <<<<<<<<<<<<<<
 *                                 for iii in range(ii+1, nqubits):
 *                                     if qubits[ii] == -1 and qubits[iii] == -1 and dist[ii][iii] < min_dist:
 */
              __pyx_t_1 = __pyx_v_nqubits;
              __pyx_t_2 = __pyx_t_1;
              for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
                __pyx_v_ii = __pyx_t_3;

                /* "a_star_mapper.pyx":425
 *                             # find best initial mapping
 *                             for ii in range(nqubits):
 *                                 for iii in range(ii+1, nqubits):             # <<<<<<<<<<<<<<
 *                                     if qubits[ii] == -1 and qubits[iii] == -1 and dist[ii][iii] < min_dist:
 *                                         min_dist = dist[ii][iii]
 */
                __pyx_t_18 = __pyx_v_nqubits;
                __pyx_t_20 = __pyx_t_18;
                for (__pyx_t_21 = (__pyx_v_ii + 1); __pyx_t_21 < __pyx_t_20; __pyx_t_21+=1) {
                  __pyx_v_iii = __pyx_t_21;

                  /* "a_star_mapper.pyx":426
 *                             for ii in range(nqubits):
 *                                 for iii in range(ii+1, nqubits):
 *                                     if qubits[ii] == -1 and qubits[iii] == -1 and dist[ii][iii] < min_dist:             # <<<<<<<<<<<<<<
 *                                         min_dist = dist[ii][iii]
 *                                         min_q1 = ii
 */
                  __pyx_t_19 = (((__pyx_v_qubits[__pyx_v_ii]) == -1L) != 0);
                  if (__pyx_t_19) {
                  } else {
                    __pyx_t_15 = __pyx_t_19;
                    goto __pyx_L46_bool_binop_done;
                  }
                  __pyx_t_19 = (((__pyx_v_qubits[__pyx_v_iii]) == -1L) != 0);
                  if (__pyx_t_19) {
                  } else {
                    __pyx_t_15 = __pyx_t_19;
                    goto __pyx_L46_bool_binop_done;
                  }
                  __pyx_t_19 = ((((__pyx_v_dist[__pyx_v_ii])[__pyx_v_iii]) < __pyx_v_min_dist) != 0);
                  __pyx_t_15 = __pyx_t_19;
                  __pyx_L46_bool_binop_done:;
                  if (__pyx_t_15) {

                    /* "a_star_mapper.pyx":427
 *                                 for iii in range(ii+1, nqubits):
 *                                     if qubits[ii] == -1 and qubits[iii] == -1 and dist[ii][iii] < min_dist:
 *                                         min_dist = dist[ii][iii]             # <<<<<<<<<<<<<<
 *                                         min_q1 = ii
 *                                         min_q2 = iii
 */
                    __pyx_v_min_dist = ((__pyx_v_dist[__pyx_v_ii])[__pyx_v_iii]);

                    /* "a_star_mapper.pyx":428
 *                                     if qubits[ii] == -1 and qubits[iii] == -1 and dist[ii][iii] < min_dist:
 *                                         min_dist = dist[ii][iii]
 *                                         min_q1 = ii             # <<<<<<<<<<<<<<
 *                                         min_q2 = iii
 *                             locations[q0] = min_q1
 */
                    __pyx_v_min_q1 = __pyx_v_ii;

                    /* "a_star_mapper.pyx":429
 *                                         min_dist = dist[ii][iii]
 *                                         min_q1 = ii
 *                                         min_q2 = iii             # <<<<<<<<<<<<<<
 *                             locations[q0] = min_q1
 *                             locations[q1] = min_q2
 */
                    __pyx_v_min_q2 = __pyx_v_iii;

                    /* "a_star_mapper.pyx":426
 *                             for ii in range(nqubits):
 *                                 for iii in range(ii+1, nqubits):
 *                                     if qubits[ii] == -1 and qubits[iii] == -1 and dist[ii][iii] < min_dist:             # <<<<<<<<<<<<<<
 *                                         min_dist = dist[ii][iii]
 *                                         min_q1 = ii
 */
                  }
                }
              }

              /* "a_star_mapper.pyx":430
 *                                         min_q1 = ii
 *                                         min_q2 = iii
 *                             locations[q0] = min_q1             # <<<<<<<<<<<<<<
 *                             locations[q1] = min_q2
 *                             qubits[min_q1] = q0
 */
              (__pyx_v_locations[__pyx_v_q0]) = __pyx_v_min_q1;

              /* "a_star_mapper.pyx":431
 *                                         min_q2 = iii
 *                             locations[q0] = min_q1
 *                             locations[q1] = min_q2             # <<<<<<<<<<<<<<
 *                             qubits[min_q1] = q0
 *                             qubits[min_q2] = q1
 */
              (__pyx_v_locations[__pyx_v_q1]) = __pyx_v_min_q2;

              /* "a_star_mapper.pyx":432
 *                             locations[q0] = min_q1
 *                             locations[q1] = min_q2
 *                             qubits[min_q1] = q0             # <<<<<<<<<<<<<<
 *                             qubits[min_q2] = q1
 *                         elif locations[q0] == -1:
 */
              (__pyx_v_qubits[__pyx_v_min_q1]) = __pyx_v_q0;

              /* "a_star_mapper.pyx":433
 *                             locations[q1] = min_q2
 *                             qubits[min_q1] = q0
 *                             qubits[min_q2] = q1             # <<<<<<<<<<<<<<
 *                         elif locations[q0] == -1:
 *                             # case: only q0 is not yet mapped
 */
              (__pyx_v_qubits[__pyx_v_min_q2]) = __pyx_v_q1;

              /* "a_star_mapper.pyx":418
 *                         q1 = grouped_gates.node[node]['qubits'][1]
 * 
 *                         if locations[q0] == -1 and locations[q1] == -1:             # <<<<<<<<<<<<<<
 *                             # case: both qubits are not yet mapped
 *                             min_dist = nqubits
 */
              goto __pyx_L38;
            }

            /* "a_star_mapper.pyx":434
 *                             qubits[min_q1] = q0
 *                             qubits[min_q2] = q1
 *                         elif locations[q0] == -1:             # <<<<<<<<<<<<<<
 *                             # case: only q0 is not yet mapped
 *                             min_dist = nqubits
 */
            __pyx_t_15 = (((__pyx_v_locations[__pyx_v_q0]) == -1L) != 0);
            if (__pyx_t_15) {

              /* "a_star_mapper.pyx":436
 *                         elif locations[q0] == -1:
 *                             # case: only q0 is not yet mapped
 *                             min_dist = nqubits             # <<<<<<<<<<<<<<
 *                             min_q1 = -1
 *                             # find best initial mapping
 */
              __pyx_v_min_dist = __pyx_v_nqubits;

              /* "a_star_mapper.pyx":437
 *                             # case: only q0 is not yet mapped
 *                             min_dist = nqubits
 *                             min_q1 = -1             # <<<<<<<<<<<<<<
 *                             # find best initial mapping
 *                             for ii in range(nqubits):
 */
              __pyx_v_min_q1 = -1L;

              /* "a_star_mapper.pyx":439
 *                             min_q1 = -1
 *                             # find best initial mapping
 *                             for ii in range(nqubits):             # <<<<<<<<<<<<<<
 *                                 if qubits[ii] == -1 and dist[ii][locations[q1]] < min_dist:
 *                                     min_dist = dist[ii][locations[q1]]
 */
              __pyx_t_1 = __pyx_v_nqubits;
              __pyx_t_2 = __pyx_t_1;
              for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
                __pyx_v_ii = __pyx_t_3;

                /* "a_star_mapper.pyx":440
 *                             # find best initial mapping
 *                             for ii in range(nqubits):
 *                                 if qubits[ii] == -1 and dist[ii][locations[q1]] < min_dist:             # <<<<<<<<<<<<<<
 *                                     min_dist = dist[ii][locations[q1]]
 *                                     min_q1 = ii
 */
                __pyx_t_19 = (((__pyx_v_qubits[__pyx_v_ii]) == -1L) != 0);
                if (__pyx_t_19) {
                } else {
                  __pyx_t_15 = __pyx_t_19;
                  goto __pyx_L52_bool_binop_done;
                }
                __pyx_t_19 = ((((__pyx_v_dist[__pyx_v_ii])[(__pyx_v_locations[__pyx_v_q1])]) < __pyx_v_min_dist) != 0);
                __pyx_t_15 = __pyx_t_19;
                __pyx_L52_bool_binop_done:;
                if (__pyx_t_15) {

                  /* "a_star_mapper.pyx":441
 *                             for ii in range(nqubits):
 *                                 if qubits[ii] == -1 and dist[ii][locations[q1]] < min_dist:
 *                                     min_dist = dist[ii][locations[q1]]             # <<<<<<<<<<<<<<
 *                                     min_q1 = ii
 *                             locations[q0] = min_q1
 */
                  __pyx_v_min_dist = ((__pyx_v_dist[__pyx_v_ii])[(__pyx_v_locations[__pyx_v_q1])]);

                  /* "a_star_mapper.pyx":442
 *                                 if qubits[ii] == -1 and dist[ii][locations[q1]] < min_dist:
 *                                     min_dist = dist[ii][locations[q1]]
 *                                     min_q1 = ii             # <<<<<<<<<<<<<<
 *                             locations[q0] = min_q1
 *                             qubits[min_q1] = q0
 */
                  __pyx_v_min_q1 = __pyx_v_ii;

                  /* "a_star_mapper.pyx":440
 *                             # find best initial mapping
 *                             for ii in range(nqubits):
 *                                 if qubits[ii] == -1 and dist[ii][locations[q1]] < min_dist:             # <<<<<<<<<<<<<<
 *                                     min_dist = dist[ii][locations[q1]]
 *                                     min_q1 = ii
 */
                }
              }

              /* "a_star_mapper.pyx":443
 *                                     min_dist = dist[ii][locations[q1]]
 *                                     min_q1 = ii
 *                             locations[q0] = min_q1             # <<<<<<<<<<<<<<
 *                             qubits[min_q1] = q0
 *                         elif locations[q1] == -1:
 */
              (__pyx_v_locations[__pyx_v_q0]) = __pyx_v_min_q1;

              /* "a_star_mapper.pyx":444
 *                                     min_q1 = ii
 *                             locations[q0] = min_q1
 *                             qubits[min_q1] = q0             # <<<<<<<<<<<<<<
 *                         elif locations[q1] == -1:
 *                             # case: only q1 is not yet mapped
 */
              (__pyx_v_qubits[__pyx_v_min_q1]) = __pyx_v_q0;

              /* "a_star_mapper.pyx":434
 *                             qubits[min_q1] = q0
 *                             qubits[min_q2] = q1
 *                         elif locations[q0] == -1:             # <<<<<<<<<<<<<<
 *                             # case: only q0 is not yet mapped
 *                             min_dist = nqubits
 */
              goto __pyx_L38;
            }

            /* "a_star_mapper.pyx":445
 *                             locations[q0] = min_q1
 *                             qubits[min_q1] = q0
 *                         elif locations[q1] == -1:             # <<<<<<<<<<<<<<
 *                             # case: only q1 is not yet mapped
 *                             min_dist = nqubits
 */
            __pyx_t_15 = (((__pyx_v_locations[__pyx_v_q1]) == -1L) != 0);
            if (__pyx_t_15) {

              /* "a_star_mapper.pyx":447
 *                         elif locations[q1] == -1:
 *                             # case: only q1 is not yet mapped
 *                             min_dist = nqubits             # <<<<<<<<<<<<<<
 *                             min_q1 = -1
 *                             # find best initial mapping
 */
              __pyx_v_min_dist = __pyx_v_nqubits;

              /* "a_star_mapper.pyx":448
 *                             # case: only q1 is not yet mapped
 *                             min_dist = nqubits
 *                             min_q1 = -1             # <<<<<<<<<<<<<<
 *                             # find best initial mapping
 *                             for ii in range(nqubits):
 */
              __pyx_v_min_q1 = -1L;

              /* "a_star_mapper.pyx":450
 *                             min_q1 = -1
 *                             # find best initial mapping
 *                             for ii in range(nqubits):             # <<<<<<<<<<<<<<
 *                                 if qubits[ii] == -1 and dist[ii][locations[q0]] < min_dist:
 *                                     min_dist = dist[ii][locations[q0]]
 */
              __pyx_t_1 = __pyx_v_nqubits;
              __pyx_t_2 = __pyx_t_1;
              for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
                __pyx_v_ii = __pyx_t_3;

                /* "a_star_mapper.pyx":451
 *                             # find best initial mapping
 *                             for ii in range(nqubits):
 *                                 if qubits[ii] == -1 and dist[ii][locations[q0]] < min_dist:             # <<<<<<<<<<<<<<
 *                                     min_dist = dist[ii][locations[q0]]
 *                                     min_q1 = ii
 */
                __pyx_t_19 = (((__pyx_v_qubits[__pyx_v_ii]) == -1L) != 0);
                if (__pyx_t_19) {
                } else {
                  __pyx_t_15 = __pyx_t_19;
                  goto __pyx_L57_bool_binop_done;
                }
                __pyx_t_19 = ((((__pyx_v_dist[__pyx_v_ii])[(__pyx_v_locations[__pyx_v_q0])]) < __pyx_v_min_dist) != 0);
                __pyx_t_15 = __pyx_t_19;
                __pyx_L57_bool_binop_done:;
                if (__pyx_t_15) {

                  /* "a_star_mapper.pyx":452
 *                             for ii in range(nqubits):
 *                                 if qubits[ii] == -1 and dist[ii][locations[q0]] < min_dist:
 *                                     min_dist = dist[ii][locations[q0]]             # <<<<<<<<<<<<<<
 *                                     min_q1 = ii
 *                             locations[q1] = min_q1
 */
                  __pyx_v_min_dist = ((__pyx_v_dist[__pyx_v_ii])[(__pyx_v_locations[__pyx_v_q0])]);

                  /* "a_star_mapper.pyx":453
 *                                 if qubits[ii] == -1 and dist[ii][locations[q0]] < min_dist:
 *                                     min_dist = dist[ii][locations[q0]]
 *                                     min_q1 = ii             # <<<<<<<<<<<<<<
 *                             locations[q1] = min_q1
 *                             qubits[min_q1] = q1
 */
                  __pyx_v_min_q1 = __pyx_v_ii;

                  /* "a_star_mapper.pyx":451
 *                             # find best initial mapping
 *                             for ii in range(nqubits):
 *                                 if qubits[ii] == -1 and dist[ii][locations[q0]] < min_dist:             # <<<<<<<<<<<<<<
 *                                     min_dist = dist[ii][locations[q0]]
 *                                     min_q1 = ii
 */
                }
              }

              /* "a_star_mapper.pyx":454
 *                                     min_dist = dist[ii][locations[q0]]
 *                                     min_q1 = ii
 *                             locations[q1] = min_q1             # <<<<<<<<<<<<<<
 *                             qubits[min_q1] = q1
 * 
 */
              (__pyx_v_locations[__pyx_v_q1]) = __pyx_v_min_q1;

              /* "a_star_mapper.pyx":455
 *                                     min_q1 = ii
 *                             locations[q1] = min_q1
 *                             qubits[min_q1] = q1             # <<<<<<<<<<<<<<
 * 
 *                         # gates with a distance of 1 can be directly applied
 */
              (__pyx_v_qubits[__pyx_v_min_q1]) = __pyx_v_q1;

              /* "a_star_mapper.pyx":445
 *                             locations[q0] = min_q1
 *                             qubits[min_q1] = q0
 *                         elif locations[q1] == -1:             # <<<<<<<<<<<<<<
 *                             # case: only q1 is not yet mapped
 *                             min_dist = nqubits
 */
            }
            __pyx_L38:;

            /* "a_star_mapper.pyx":458
 * 
 *                         # gates with a distance of 1 can be directly applied
 *                         if dist[locations[q0]][locations[q1]] == 1:             # <<<<<<<<<<<<<<
 *                             compiled_circuit = add_rewritten_gates(grouped_gates.node[node]['gates'], locations, compiled_circuit)
 *                             if coupling_graph.find(pair[int, int](locations[q0], locations[q1])) != coupling_graph.end():
 */
            __pyx_t_15 = ((((__pyx_v_dist[(__pyx_v_locations[__pyx_v_q0])])[(__pyx_v_locations[__pyx_v_q1])]) == 1) != 0);
            if (__pyx_t_15) {

              /* "a_star_mapper.pyx":459
 *                         # gates with a distance of 1 can be directly applied
 *                         if dist[locations[q0]][locations[q1]] == 1:
 *                             compiled_circuit = add_rewritten_gates(grouped_gates.node[node]['gates'], locations, compiled_circuit)             # <<<<<<<<<<<<<<
 *                             if coupling_graph.find(pair[int, int](locations[q0], locations[q1])) != coupling_graph.end():
 *                                 applied_gates.push_back(pair[int, int](locations[q0], locations[q1]))
 */
              __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_grouped_gates, __pyx_n_s_node); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 459, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_v_node); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 459, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_9, __pyx_n_s_gates); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 459, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __pyx_t_9 = __pyx_f_13a_star_mapper_add_rewritten_gates(__pyx_t_5, __pyx_v_locations, __pyx_v_compiled_circuit); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 459, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_DECREF_SET(__pyx_v_compiled_circuit, __pyx_t_9);
              __pyx_t_9 = 0;

              /* "a_star_mapper.pyx":460
 *                         if dist[locations[q0]][locations[q1]] == 1:
 *                             compiled_circuit = add_rewritten_gates(grouped_gates.node[node]['gates'], locations, compiled_circuit)
 *                             if coupling_graph.find(pair[int, int](locations[q0], locations[q1])) != coupling_graph.end():             # <<<<<<<<<<<<<<
 *                                 applied_gates.push_back(pair[int, int](locations[q0], locations[q1]))
 *                             else:
 */
              try {
                __pyx_t_14 = std::pair<int,int> ((__pyx_v_locations[__pyx_v_q0]), (__pyx_v_locations[__pyx_v_q1]));
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(0, 460, __pyx_L1_error)
              }
              __pyx_t_15 = ((__pyx_v_coupling_graph.find(__pyx_t_14) != __pyx_v_coupling_graph.end()) != 0);
              if (__pyx_t_15) {

                /* "a_star_mapper.pyx":461
 *                             compiled_circuit = add_rewritten_gates(grouped_gates.node[node]['gates'], locations, compiled_circuit)
 *                             if coupling_graph.find(pair[int, int](locations[q0], locations[q1])) != coupling_graph.end():
 *                                 applied_gates.push_back(pair[int, int](locations[q0], locations[q1]))             # <<<<<<<<<<<<<<
 *                             else:
 *                                 applied_gates.push_back(pair[int, int](locations[q1], locations[q0]))
 */
                try {
                  __pyx_t_14 = std::pair<int,int> ((__pyx_v_locations[__pyx_v_q0]), (__pyx_v_locations[__pyx_v_q1]));
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 461, __pyx_L1_error)
                }
                try {
                  __pyx_v_applied_gates.push_back(__pyx_t_14);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 461, __pyx_L1_error)
                }

                /* "a_star_mapper.pyx":460
 *                         if dist[locations[q0]][locations[q1]] == 1:
 *                             compiled_circuit = add_rewritten_gates(grouped_gates.node[node]['gates'], locations, compiled_circuit)
 *                             if coupling_graph.find(pair[int, int](locations[q0], locations[q1])) != coupling_graph.end():             # <<<<<<<<<<<<<<
 *                                 applied_gates.push_back(pair[int, int](locations[q0], locations[q1]))
 *                             else:
 */
                goto __pyx_L60;
              }

              /* "a_star_mapper.pyx":463
 *                                 applied_gates.push_back(pair[int, int](locations[q0], locations[q1]))
 *                             else:
 *                                 applied_gates.push_back(pair[int, int](locations[q1], locations[q0]))             # <<<<<<<<<<<<<<
 * 
 *                             # remove nodes representing the added gates
 */
              /*else*/ {
                try {
                  __pyx_t_14 = std::pair<int,int> ((__pyx_v_locations[__pyx_v_q1]), (__pyx_v_locations[__pyx_v_q0]));
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 463, __pyx_L1_error)
                }
                try {
                  __pyx_v_applied_gates.push_back(__pyx_t_14);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 463, __pyx_L1_error)
                }
              }
              __pyx_L60:;

              /* "a_star_mapper.pyx":466
 * 
 *                             # remove nodes representing the added gates
 *                             nodes_to_remove += [node]             # <<<<<<<<<<<<<<
 *                         else:
 *                             # gates with a distance greater than 1 can potentially be applied (after fixing the mapping)
 */
              __pyx_t_9 = PyList_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 466, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_INCREF(__pyx_v_node);
              __Pyx_GIVEREF(__pyx_v_node);
              PyList_SET_ITEM(__pyx_t_9, 0, __pyx_v_node);
              __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_nodes_to_remove, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 466, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_DECREF_SET(__pyx_v_nodes_to_remove, ((PyObject*)__pyx_t_5));
              __pyx_t_5 = 0;

              /* "a_star_mapper.pyx":458
 * 
 *                         # gates with a distance of 1 can be directly applied
 *                         if dist[locations[q0]][locations[q1]] == 1:             # <<<<<<<<<<<<<<
 *                             compiled_circuit = add_rewritten_gates(grouped_gates.node[node]['gates'], locations, compiled_circuit)
 *                             if coupling_graph.find(pair[int, int](locations[q0], locations[q1])) != coupling_graph.end():
 */
              goto __pyx_L59;
            }

            /* "a_star_mapper.pyx":469
 *                         else:
 *                             # gates with a distance greater than 1 can potentially be applied (after fixing the mapping)
 *                             applicable_gates.insert((q0, q1))             # <<<<<<<<<<<<<<
 *             if len(nodes_to_remove) == 0:
 *                 break
 */
            /*else*/ {
              __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_q0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 469, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_q1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 469, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 469, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_GIVEREF(__pyx_t_5);
              PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_9);
              PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_9);
              __pyx_t_5 = 0;
              __pyx_t_9 = 0;
              __pyx_t_14 = __pyx_convert_pair_from_py_int__and_int(__pyx_t_10); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 469, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              try {
                __pyx_v_applicable_gates.insert(__pyx_t_14);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(0, 469, __pyx_L1_error)
              }
            }
            __pyx_L59:;
          }
          __pyx_L32:;

          /* "a_star_mapper.pyx":401
 *             for node in grouped_gates.nodes:
 *                 degree = grouped_gates.in_degree(node)
 *                 if degree == 0:             # <<<<<<<<<<<<<<
 *                     if len(grouped_gates.node[node]['qubits']) != 2:
 *                         # add measurement and barrier gates to the compiled circuit
 */
        }

        /* "a_star_mapper.pyx":399
 *             applicable_gates.clear()
 *             nodes_to_remove = []
 *             for node in grouped_gates.nodes:             # <<<<<<<<<<<<<<
 *                 degree = grouped_gates.in_degree(node)
 *                 if degree == 0:
 */
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "a_star_mapper.pyx":470
 *                             # gates with a distance greater than 1 can potentially be applied (after fixing the mapping)
 *                             applicable_gates.insert((q0, q1))
 *             if len(nodes_to_remove) == 0:             # <<<<<<<<<<<<<<
 *                 break
 *             else:
 */
      __pyx_t_7 = PyList_GET_SIZE(__pyx_v_nodes_to_remove); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 470, __pyx_L1_error)
      __pyx_t_15 = ((__pyx_t_7 == 0) != 0);
      if (__pyx_t_15) {

        /* "a_star_mapper.pyx":471
 *                             applicable_gates.insert((q0, q1))
 *             if len(nodes_to_remove) == 0:
 *                 break             # <<<<<<<<<<<<<<
 *             else:
 *                 grouped_gates.remove_nodes_from(nodes_to_remove)
 */
        goto __pyx_L28_break;

        /* "a_star_mapper.pyx":470
 *                             # gates with a distance greater than 1 can potentially be applied (after fixing the mapping)
 *                             applicable_gates.insert((q0, q1))
 *             if len(nodes_to_remove) == 0:             # <<<<<<<<<<<<<<
 *                 break
 *             else:
 */
      }

      /* "a_star_mapper.pyx":473
 *                 break
 *             else:
 *                 grouped_gates.remove_nodes_from(nodes_to_remove)             # <<<<<<<<<<<<<<
 * 
 *         # check whether all gates have been successfully applied
 */
      /*else*/ {
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_grouped_gates, __pyx_n_s_remove_nodes_from); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 473, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
          }
        }
        if (!__pyx_t_9) {
          __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_nodes_to_remove); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 473, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_10)) {
            PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_v_nodes_to_remove};
            __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 473, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_GOTREF(__pyx_t_4);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
            PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_v_nodes_to_remove};
            __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 473, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_GOTREF(__pyx_t_4);
          } else
          #endif
          {
            __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 473, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_9); __pyx_t_9 = NULL;
            __Pyx_INCREF(__pyx_v_nodes_to_remove);
            __Pyx_GIVEREF(__pyx_v_nodes_to_remove);
            PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_nodes_to_remove);
            __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 473, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    }
    __pyx_L28_break:;

    /* "a_star_mapper.pyx":476
 * 
 *         # check whether all gates have been successfully applied
 *         if len(applicable_gates) == 0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_4 = __pyx_convert_set_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(__pyx_v_applicable_gates); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 476, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_15 = ((__pyx_t_7 == 0) != 0);
    if (__pyx_t_15) {

      /* "a_star_mapper.pyx":477
 *         # check whether all gates have been successfully applied
 *         if len(applicable_gates) == 0:
 *             break             # <<<<<<<<<<<<<<
 * 
 *         # determine which SWAPs can be applied for "free". A SWAP on qubits q0 and q1 does not cost anything if the group of gates between q0 and q1 have been directly applied before it. This assumption is justified by the post-processing we use and can be included in the heuristic of the search algorithm.
 */
      goto __pyx_L26_break;

      /* "a_star_mapper.pyx":476
 * 
 *         # check whether all gates have been successfully applied
 *         if len(applicable_gates) == 0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "a_star_mapper.pyx":480
 * 
 *         # determine which SWAPs can be applied for "free". A SWAP on qubits q0 and q1 does not cost anything if the group of gates between q0 and q1 have been directly applied before it. This assumption is justified by the post-processing we use and can be included in the heuristic of the search algorithm.
 *         used_qubits.clear()             # <<<<<<<<<<<<<<
 *         free_swaps.clear()
 *         for i in range(applied_gates.size()-1,-1,-1):
 */
    __pyx_v_used_qubits.clear();

    /* "a_star_mapper.pyx":481
 *         # determine which SWAPs can be applied for "free". A SWAP on qubits q0 and q1 does not cost anything if the group of gates between q0 and q1 have been directly applied before it. This assumption is justified by the post-processing we use and can be included in the heuristic of the search algorithm.
 *         used_qubits.clear()
 *         free_swaps.clear()             # <<<<<<<<<<<<<<
 *         for i in range(applied_gates.size()-1,-1,-1):
 *             if used_qubits.find(applied_gates[i].first) == used_qubits.end() and used_qubits.find(applied_gates[i].second) == used_qubits.end():
 */
    __pyx_v_free_swaps.clear();

    /* "a_star_mapper.pyx":482
 *         used_qubits.clear()
 *         free_swaps.clear()
 *         for i in range(applied_gates.size()-1,-1,-1):             # <<<<<<<<<<<<<<
 *             if used_qubits.find(applied_gates[i].first) == used_qubits.end() and used_qubits.find(applied_gates[i].second) == used_qubits.end():
 *                 free_swaps.insert(applied_gates[i])
 */
    for (__pyx_t_1 = (__pyx_v_applied_gates.size() - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
      __pyx_v_i = __pyx_t_1;

      /* "a_star_mapper.pyx":483
 *         free_swaps.clear()
 *         for i in range(applied_gates.size()-1,-1,-1):
 *             if used_qubits.find(applied_gates[i].first) == used_qubits.end() and used_qubits.find(applied_gates[i].second) == used_qubits.end():             # <<<<<<<<<<<<<<
 *                 free_swaps.insert(applied_gates[i])
 *             used_qubits.insert(applied_gates[i].first)
 */
      __pyx_t_19 = ((__pyx_v_used_qubits.find((__pyx_v_applied_gates[__pyx_v_i]).first) == __pyx_v_used_qubits.end()) != 0);
      if (__pyx_t_19) {
      } else {
        __pyx_t_15 = __pyx_t_19;
        goto __pyx_L66_bool_binop_done;
      }
      __pyx_t_19 = ((__pyx_v_used_qubits.find((__pyx_v_applied_gates[__pyx_v_i]).second) == __pyx_v_used_qubits.end()) != 0);
      __pyx_t_15 = __pyx_t_19;
      __pyx_L66_bool_binop_done:;
      if (__pyx_t_15) {

        /* "a_star_mapper.pyx":484
 *         for i in range(applied_gates.size()-1,-1,-1):
 *             if used_qubits.find(applied_gates[i].first) == used_qubits.end() and used_qubits.find(applied_gates[i].second) == used_qubits.end():
 *                 free_swaps.insert(applied_gates[i])             # <<<<<<<<<<<<<<
 *             used_qubits.insert(applied_gates[i].first)
 *             used_qubits.insert(applied_gates[i].second)
 */
        try {
          __pyx_v_free_swaps.insert((__pyx_v_applied_gates[__pyx_v_i]));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 484, __pyx_L1_error)
        }

        /* "a_star_mapper.pyx":483
 *         free_swaps.clear()
 *         for i in range(applied_gates.size()-1,-1,-1):
 *             if used_qubits.find(applied_gates[i].first) == used_qubits.end() and used_qubits.find(applied_gates[i].second) == used_qubits.end():             # <<<<<<<<<<<<<<
 *                 free_swaps.insert(applied_gates[i])
 *             used_qubits.insert(applied_gates[i].first)
 */
      }

      /* "a_star_mapper.pyx":485
 *             if used_qubits.find(applied_gates[i].first) == used_qubits.end() and used_qubits.find(applied_gates[i].second) == used_qubits.end():
 *                 free_swaps.insert(applied_gates[i])
 *             used_qubits.insert(applied_gates[i].first)             # <<<<<<<<<<<<<<
 *             used_qubits.insert(applied_gates[i].second)
 * 
 */
      try {
        __pyx_v_used_qubits.insert((__pyx_v_applied_gates[__pyx_v_i]).first);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 485, __pyx_L1_error)
      }

      /* "a_star_mapper.pyx":486
 *                 free_swaps.insert(applied_gates[i])
 *             used_qubits.insert(applied_gates[i].first)
 *             used_qubits.insert(applied_gates[i].second)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      try {
        __pyx_v_used_qubits.insert((__pyx_v_applied_gates[__pyx_v_i]).second);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 486, __pyx_L1_error)
      }
    }

    /* "a_star_mapper.pyx":490
 * 
 *         # Apply A* to find a permutation such that further gates can be applied
 *         result = a_star_search(applicable_gates, qubits, locations, dist, nqubits, coupling_graph, free_swaps)             # <<<<<<<<<<<<<<
 * 
 *         # update current mapping
 */
    try {
      __pyx_t_22 = __pyx_f_13a_star_mapper_a_star_search(__pyx_v_applicable_gates, __pyx_v_qubits, __pyx_v_locations, __pyx_v_dist, __pyx_v_nqubits, __pyx_v_coupling_graph, __pyx_v_free_swaps);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 490, __pyx_L1_error)
    }
    __pyx_v_result = __pyx_t_22;

    /* "a_star_mapper.pyx":493
 * 
 *         # update current mapping
 *         free(locations)             # <<<<<<<<<<<<<<
 *         free(qubits)
 *         locations = result.locations
 */
    free(__pyx_v_locations);

    /* "a_star_mapper.pyx":494
 *         # update current mapping
 *         free(locations)
 *         free(qubits)             # <<<<<<<<<<<<<<
 *         locations = result.locations
 *         qubits = result.qubits
 */
    free(__pyx_v_qubits);

    /* "a_star_mapper.pyx":495
 *         free(locations)
 *         free(qubits)
 *         locations = result.locations             # <<<<<<<<<<<<<<
 *         qubits = result.qubits
 * 
 */
    __pyx_t_17 = __pyx_v_result->locations;
    __pyx_v_locations = __pyx_t_17;

    /* "a_star_mapper.pyx":496
 *         free(qubits)
 *         locations = result.locations
 *         qubits = result.qubits             # <<<<<<<<<<<<<<
 * 
 *         # add SWAPs to the compiled circuit to modify the current the mapping
 */
    __pyx_t_17 = __pyx_v_result->qubits;
    __pyx_v_qubits = __pyx_t_17;

    /* "a_star_mapper.pyx":499
 * 
 *         # add SWAPs to the compiled circuit to modify the current the mapping
 *         for swap in result.swaps:             # <<<<<<<<<<<<<<
 *             compiled_circuit.apply_operation_back('cx', [('q',swap.first), ('q',swap.second)])
 *             compiled_circuit.apply_operation_back('cx', [('q',swap.second), ('q',swap.first)])
 */
    __pyx_t_24 = &__pyx_v_result->swaps;
    __pyx_t_23 = __pyx_t_24->begin();
    for (;;) {
      if (!(__pyx_t_23 != __pyx_t_24->end())) break;
      __pyx_t_14 = *__pyx_t_23;
      ++__pyx_t_23;
      __pyx_v_swap = __pyx_t_14;

      /* "a_star_mapper.pyx":500
 *         # add SWAPs to the compiled circuit to modify the current the mapping
 *         for swap in result.swaps:
 *             compiled_circuit.apply_operation_back('cx', [('q',swap.first), ('q',swap.second)])             # <<<<<<<<<<<<<<
 *             compiled_circuit.apply_operation_back('cx', [('q',swap.second), ('q',swap.first)])
 *             compiled_circuit.apply_operation_back('cx', [('q',swap.first), ('q',swap.second)])
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_compiled_circuit, __pyx_n_s_apply_operation_back); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 500, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_swap.first); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 500, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 500, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_n_s_q);
      __Pyx_GIVEREF(__pyx_n_s_q);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_n_s_q);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_swap.second); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 500, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 500, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_n_s_q);
      __Pyx_GIVEREF(__pyx_n_s_q);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_n_s_q);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 500, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_9);
      PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_6);
      PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
      __pyx_t_9 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_1 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_1 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_10)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_n_s_cx, __pyx_t_5};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 500, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_n_s_cx, __pyx_t_5};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 500, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 500, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_6) {
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6); __pyx_t_6 = NULL;
        }
        __Pyx_INCREF(__pyx_n_s_cx);
        __Pyx_GIVEREF(__pyx_n_s_cx);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_1, __pyx_n_s_cx);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 500, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "a_star_mapper.pyx":501
 *         for swap in result.swaps:
 *             compiled_circuit.apply_operation_back('cx', [('q',swap.first), ('q',swap.second)])
 *             compiled_circuit.apply_operation_back('cx', [('q',swap.second), ('q',swap.first)])             # <<<<<<<<<<<<<<
 *             compiled_circuit.apply_operation_back('cx', [('q',swap.first), ('q',swap.second)])
 * 
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_compiled_circuit, __pyx_n_s_apply_operation_back); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 501, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_swap.second); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 501, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 501, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_n_s_q);
      __Pyx_GIVEREF(__pyx_n_s_q);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_q);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_swap.first); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 501, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 501, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_n_s_q);
      __Pyx_GIVEREF(__pyx_n_s_q);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_n_s_q);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_9 = PyList_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 501, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_5);
      PyList_SET_ITEM(__pyx_t_9, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyList_SET_ITEM(__pyx_t_9, 1, __pyx_t_6);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_1 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_1 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_10)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_n_s_cx, __pyx_t_9};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 501, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_n_s_cx, __pyx_t_9};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 501, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 501, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (__pyx_t_6) {
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
        }
        __Pyx_INCREF(__pyx_n_s_cx);
        __Pyx_GIVEREF(__pyx_n_s_cx);
        PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_1, __pyx_n_s_cx);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_1, __pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 501, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "a_star_mapper.pyx":502
 *             compiled_circuit.apply_operation_back('cx', [('q',swap.first), ('q',swap.second)])
 *             compiled_circuit.apply_operation_back('cx', [('q',swap.second), ('q',swap.first)])
 *             compiled_circuit.apply_operation_back('cx', [('q',swap.first), ('q',swap.second)])             # <<<<<<<<<<<<<<
 * 
 *             applied_gates.push_back(swap)
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_compiled_circuit, __pyx_n_s_apply_operation_back); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 502, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_swap.first); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 502, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 502, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_n_s_q);
      __Pyx_GIVEREF(__pyx_n_s_q);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_n_s_q);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_swap.second); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 502, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 502, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_n_s_q);
      __Pyx_GIVEREF(__pyx_n_s_q);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_n_s_q);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 502, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_9);
      PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_6);
      PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
      __pyx_t_9 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_1 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_1 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_10)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_n_s_cx, __pyx_t_5};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 502, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_n_s_cx, __pyx_t_5};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 502, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 502, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_6) {
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6); __pyx_t_6 = NULL;
        }
        __Pyx_INCREF(__pyx_n_s_cx);
        __Pyx_GIVEREF(__pyx_n_s_cx);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_1, __pyx_n_s_cx);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 502, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "a_star_mapper.pyx":504
 *             compiled_circuit.apply_operation_back('cx', [('q',swap.first), ('q',swap.second)])
 * 
 *             applied_gates.push_back(swap)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      try {
        __pyx_v_applied_gates.push_back(__pyx_v_swap);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 504, __pyx_L1_error)
      }

      /* "a_star_mapper.pyx":499
 * 
 *         # add SWAPs to the compiled circuit to modify the current the mapping
 *         for swap in result.swaps:             # <<<<<<<<<<<<<<
 *             compiled_circuit.apply_operation_back('cx', [('q',swap.first), ('q',swap.second)])
 *             compiled_circuit.apply_operation_back('cx', [('q',swap.second), ('q',swap.first)])
 */
    }

    /* "a_star_mapper.pyx":507
 * 
 * 
 *         del(result)             # <<<<<<<<<<<<<<
 * 
 *     # clean up
 */
    delete __pyx_v_result;
  }
  __pyx_L26_break:;

  /* "a_star_mapper.pyx":510
 * 
 *     # clean up
 *     free(locations)             # <<<<<<<<<<<<<<
 *     free(qubits)
 *     for i in range(nqubits):
 */
  free(__pyx_v_locations);

  /* "a_star_mapper.pyx":511
 *     # clean up
 *     free(locations)
 *     free(qubits)             # <<<<<<<<<<<<<<
 *     for i in range(nqubits):
 *         free(dist[i])
 */
  free(__pyx_v_qubits);

  /* "a_star_mapper.pyx":512
 *     free(locations)
 *     free(qubits)
 *     for i in range(nqubits):             # <<<<<<<<<<<<<<
 *         free(dist[i])
 *     free(dist)
 */
  __pyx_t_1 = __pyx_v_nqubits;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "a_star_mapper.pyx":513
 *     free(qubits)
 *     for i in range(nqubits):
 *         free(dist[i])             # <<<<<<<<<<<<<<
 *     free(dist)
 * 
 */
    free((__pyx_v_dist[__pyx_v_i]));
  }

  /* "a_star_mapper.pyx":514
 *     for i in range(nqubits):
 *         free(dist[i])
 *     free(dist)             # <<<<<<<<<<<<<<
 * 
 *     return compiled_circuit
 */
  free(__pyx_v_dist);

  /* "a_star_mapper.pyx":516
 *     free(dist)
 * 
 *     return compiled_circuit             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_compiled_circuit);
  __pyx_r = __pyx_v_compiled_circuit;
  goto __pyx_L0;

  /* "a_star_mapper.pyx":312
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def a_star_mapper(grouped_gates, coupling_map, int nqubits, empty_circuit):             # <<<<<<<<<<<<<<
 *     compiled_circuit = empty_circuit
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("a_star_mapper.a_star_mapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_compiled_circuit);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XDECREF(__pyx_v_degree);
  __Pyx_XDECREF(__pyx_v_succ);
  __Pyx_XDECREF(__pyx_v_nodes_to_remove);
  __Pyx_XDECREF(__pyx_v_q);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_int__and_int")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_int__and_int(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

static std::pair<int,int>  __pyx_convert_pair_from_py_int__and_int(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  std::pair<int,int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_from_py_int__and_int", 0);

  /* "pair.from_py":146
 * @cname("__pyx_convert_pair_from_py_int__and_int")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_int__and_int(object o) except *:
 *     x, y = o             # <<<<<<<<<<<<<<
 *     return pair[X,Y](<X>x, <Y>y)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_o))) || (PyList_CheckExact(__pyx_v_o))) {
    PyObject* sequence = __pyx_v_o;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 146, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) __PYX_ERR(1, 146, __pyx_L1_error)
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 146, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pair.from_py":147
 * cdef pair[X,Y] __pyx_convert_pair_from_py_int__and_int(object o) except *:
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_x); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 147, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_y); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 147, __pyx_L1_error)
  __pyx_r = std::pair<int,int> (((int)__pyx_t_5), ((int)__pyx_t_6));
  goto __pyx_L0;

  /* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_int__and_int")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_int__and_int(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.from_py.__pyx_convert_pair_from_py_int__and_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_int____int")
 * cdef object __pyx_convert_pair_to_py_int____int(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py_int____int(std::pair<int,int>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_int____int", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py_int____int")
 * cdef object __pyx_convert_pair_to_py_int____int(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_int____int")
 * cdef object __pyx_convert_pair_to_py_int____int(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_int____int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "set.to_py":129
 * 
 * @cname("__pyx_convert_set_to_py_std_3a__3a_pair_3c_int_2c_int_3e___")
 * cdef object __pyx_convert_set_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(const cpp_set[X]& s):             # <<<<<<<<<<<<<<
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 */

static PyObject *__pyx_convert_set_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(std::set<std::pair<int,int> >  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::set<std::pair<int,int> > ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("__pyx_convert_set_to_py_std_3a__3a_pair_3c_int_2c_int_3e___", 0);

  /* "set.to_py":130
 * @cname("__pyx_convert_set_to_py_std_3a__3a_pair_3c_int_2c_int_3e___")
 * cdef object __pyx_convert_set_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(const cpp_set[X]& s):
 *     o = set()             # <<<<<<<<<<<<<<
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 *     while iter != s.end():
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "set.to_py":131
 * cdef object __pyx_convert_set_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(const cpp_set[X]& s):
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         o.add(cython.operator.dereference(iter))
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "set.to_py":132
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         o.add(cython.operator.dereference(iter))
 *         cython.operator.preincrement(iter)
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "set.to_py":133
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         o.add(cython.operator.dereference(iter))             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __pyx_convert_pair_to_py_int____int((*__pyx_v_iter)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySet_Add(__pyx_v_o, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 133, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "set.to_py":134
 *     while iter != s.end():
 *         o.add(cython.operator.dereference(iter))
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (void)((++__pyx_v_iter));
  }

  /* "set.to_py":135
 *         o.add(cython.operator.dereference(iter))
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "set.to_py":129
 * 
 * @cname("__pyx_convert_set_to_py_std_3a__3a_pair_3c_int_2c_int_3e___")
 * cdef object __pyx_convert_set_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(const cpp_set[X]& s):             # <<<<<<<<<<<<<<
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("set.to_py.__pyx_convert_set_to_py_std_3a__3a_pair_3c_int_2c_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_a_star_mapper(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_a_star_mapper},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "a_star_mapper",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_a_star_mapper, __pyx_k_a_star_mapper, sizeof(__pyx_k_a_star_mapper), 0, 0, 1, 1},
  {&__pyx_kp_s_a_star_mapper_pyx, __pyx_k_a_star_mapper_pyx, sizeof(__pyx_k_a_star_mapper_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_applicable_gates, __pyx_k_applicable_gates, sizeof(__pyx_k_applicable_gates), 0, 0, 1, 1},
  {&__pyx_n_s_applied_gates, __pyx_k_applied_gates, sizeof(__pyx_k_applied_gates), 0, 0, 1, 1},
  {&__pyx_n_s_apply_operation_back, __pyx_k_apply_operation_back, sizeof(__pyx_k_apply_operation_back), 0, 0, 1, 1},
  {&__pyx_n_s_cargs, __pyx_k_cargs, sizeof(__pyx_k_cargs), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_compiled_circuit, __pyx_k_compiled_circuit, sizeof(__pyx_k_compiled_circuit), 0, 0, 1, 1},
  {&__pyx_n_s_condition, __pyx_k_condition, sizeof(__pyx_k_condition), 0, 0, 1, 1},
  {&__pyx_n_s_coupling_graph, __pyx_k_coupling_graph, sizeof(__pyx_k_coupling_graph), 0, 0, 1, 1},
  {&__pyx_n_s_coupling_map, __pyx_k_coupling_map, sizeof(__pyx_k_coupling_map), 0, 0, 1, 1},
  {&__pyx_n_s_cx, __pyx_k_cx, sizeof(__pyx_k_cx), 0, 0, 1, 1},
  {&__pyx_n_s_degree, __pyx_k_degree, sizeof(__pyx_k_degree), 0, 0, 1, 1},
  {&__pyx_n_s_dist, __pyx_k_dist, sizeof(__pyx_k_dist), 0, 0, 1, 1},
  {&__pyx_n_s_empty_circuit, __pyx_k_empty_circuit, sizeof(__pyx_k_empty_circuit), 0, 0, 1, 1},
  {&__pyx_n_s_first_interaction, __pyx_k_first_interaction, sizeof(__pyx_k_first_interaction), 0, 0, 1, 1},
  {&__pyx_n_s_free_swaps, __pyx_k_free_swaps, sizeof(__pyx_k_free_swaps), 0, 0, 1, 1},
  {&__pyx_n_s_gates, __pyx_k_gates, sizeof(__pyx_k_gates), 0, 0, 1, 1},
  {&__pyx_n_s_get_qubits, __pyx_k_get_qubits, sizeof(__pyx_k_get_qubits), 0, 0, 1, 1},
  {&__pyx_n_s_grouped_gates, __pyx_k_grouped_gates, sizeof(__pyx_k_grouped_gates), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_ii, __pyx_k_ii, sizeof(__pyx_k_ii), 0, 0, 1, 1},
  {&__pyx_n_s_iii, __pyx_k_iii, sizeof(__pyx_k_iii), 0, 0, 1, 1},
  {&__pyx_n_s_in_degree, __pyx_k_in_degree, sizeof(__pyx_k_in_degree), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_init_perm, __pyx_k_init_perm, sizeof(__pyx_k_init_perm), 0, 0, 1, 1},
  {&__pyx_n_s_initial_gates, __pyx_k_initial_gates, sizeof(__pyx_k_initial_gates), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_locations, __pyx_k_locations, sizeof(__pyx_k_locations), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_min_dist, __pyx_k_min_dist, sizeof(__pyx_k_min_dist), 0, 0, 1, 1},
  {&__pyx_n_s_min_q1, __pyx_k_min_q1, sizeof(__pyx_k_min_q1), 0, 0, 1, 1},
  {&__pyx_n_s_min_q2, __pyx_k_min_q2, sizeof(__pyx_k_min_q2), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_node, __pyx_k_node, sizeof(__pyx_k_node), 0, 0, 1, 1},
  {&__pyx_n_s_nodes, __pyx_k_nodes, sizeof(__pyx_k_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_nodes_to_remove, __pyx_k_nodes_to_remove, sizeof(__pyx_k_nodes_to_remove), 0, 0, 1, 1},
  {&__pyx_n_s_nqubits, __pyx_k_nqubits, sizeof(__pyx_k_nqubits), 0, 0, 1, 1},
  {&__pyx_n_s_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 0, 1, 1},
  {&__pyx_n_s_params, __pyx_k_params, sizeof(__pyx_k_params), 0, 0, 1, 1},
  {&__pyx_n_s_q, __pyx_k_q, sizeof(__pyx_k_q), 0, 0, 1, 1},
  {&__pyx_n_s_q0, __pyx_k_q0, sizeof(__pyx_k_q0), 0, 0, 1, 1},
  {&__pyx_n_s_q1, __pyx_k_q1, sizeof(__pyx_k_q1), 0, 0, 1, 1},
  {&__pyx_n_s_qargs, __pyx_k_qargs, sizeof(__pyx_k_qargs), 0, 0, 1, 1},
  {&__pyx_n_s_qq, __pyx_k_qq, sizeof(__pyx_k_qq), 0, 0, 1, 1},
  {&__pyx_n_s_qubits, __pyx_k_qubits, sizeof(__pyx_k_qubits), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_remove_nodes_from, __pyx_k_remove_nodes_from, sizeof(__pyx_k_remove_nodes_from), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_succ, __pyx_k_succ, sizeof(__pyx_k_succ), 0, 0, 1, 1},
  {&__pyx_n_s_successors, __pyx_k_successors, sizeof(__pyx_k_successors), 0, 0, 1, 1},
  {&__pyx_n_s_swap, __pyx_k_swap, sizeof(__pyx_k_swap), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_used_qubits, __pyx_k_used_qubits, sizeof(__pyx_k_used_qubits), 0, 0, 1, 1},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 193, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "a_star_mapper.pyx":312
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def a_star_mapper(grouped_gates, coupling_map, int nqubits, empty_circuit):             # <<<<<<<<<<<<<<
 *     compiled_circuit = empty_circuit
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(36, __pyx_n_s_grouped_gates, __pyx_n_s_coupling_map, __pyx_n_s_nqubits, __pyx_n_s_empty_circuit, __pyx_n_s_compiled_circuit, __pyx_n_s_dist, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_applied_gates, __pyx_n_s_coupling_graph, __pyx_n_s_key, __pyx_n_s_value, __pyx_n_s_v, __pyx_n_s_locations, __pyx_n_s_qubits, __pyx_n_s_q0, __pyx_n_s_q1, __pyx_n_s_ii, __pyx_n_s_iii, __pyx_n_s_init_perm, __pyx_n_s_initial_gates, __pyx_n_s_first_interaction, __pyx_n_s_node, __pyx_n_s_degree, __pyx_n_s_succ, __pyx_n_s_applicable_gates, __pyx_n_s_result, __pyx_n_s_used_qubits, __pyx_n_s_free_swaps, __pyx_n_s_nodes_to_remove, __pyx_n_s_q, __pyx_n_s_qq, __pyx_n_s_min_dist, __pyx_n_s_min_q1, __pyx_n_s_min_q2, __pyx_n_s_swap); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);
  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(4, 0, 36, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_a_star_mapper_pyx, __pyx_n_s_a_star_mapper, 312, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_modinit_global_init_code(void); /*proto*/
static int __Pyx_modinit_variable_export_code(void); /*proto*/
static int __Pyx_modinit_function_export_code(void); /*proto*/
static int __Pyx_modinit_type_init_code(void); /*proto*/
static int __Pyx_modinit_type_import_code(void); /*proto*/
static int __Pyx_modinit_variable_import_code(void); /*proto*/
static int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (!(defined(__cplusplus)) || (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 4)))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC inita_star_mapper(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC inita_star_mapper(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_a_star_mapper(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_a_star_mapper(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_a_star_mapper(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_a_star_mapper(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("a_star_mapper", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_a_star_mapper) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "a_star_mapper")) {
      if (unlikely(PyDict_SetItemString(modules, "a_star_mapper", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "a_star_mapper.pyx":312
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def a_star_mapper(grouped_gates, coupling_map, int nqubits, empty_circuit):             # <<<<<<<<<<<<<<
 *     compiled_circuit = empty_circuit
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13a_star_mapper_1a_star_mapper, NULL, __pyx_n_s_a_star_mapper); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_a_star_mapper, __pyx_t_1) < 0) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "a_star_mapper.pyx":1
 * from libcpp.queue cimport queue, priority_queue             # <<<<<<<<<<<<<<
 * from libcpp.set cimport set
 * from libcpp.pair cimport pair
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "set.to_py":129
 * 
 * @cname("__pyx_convert_set_to_py_std_3a__3a_pair_3c_int_2c_int_3e___")
 * cdef object __pyx_convert_set_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(const cpp_set[X]& s):             # <<<<<<<<<<<<<<
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init a_star_mapper", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init a_star_mapper");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* DictGetItem */
  #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* RaiseArgTupleInvalid */
  static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
  static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
  static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseTooManyValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
  static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
  static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

/* GetItemInt */
  static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
  #if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */

---
upgrade:
  - |
    The interpretation of the ``meas_map`` attribute of a a
    :class:`~qiskit.providers.models.PulseBackendConfiguration` (or
    as the corresponding ``meas_map`` kwarg on the
    :func:`~qiskit.compiler.schedule`, :func:`~qiskit.compiler.assemble`,
    :func:`~qiskit.compiler.sequence`, or
    :func:`~qiskit.execute_function.execute` functions) has historically been
    that any measurement of qubit ``i`` must be accompanied by a measurement of
    all qubits in the same subgroup as ``i``.  For example, a ``meas_map``
    of ``[[0, 1]]`` meant that ``0`` and ``1`` must be measured at the same
    time. This definition has been changed so that the definition of a
    ``meas_map`` now means that the qubits in that subgrouping
    may not be measured such that they would partially overlap. This should not
    be breaking because simultaneous measurements would still meet this changed
    criteria (they would fully overlap, not partially), but it also means that
    if ``0`` and ``1`` were to be measured fully disjointly (ie have no
    overlap) that would also be valid now. For example:

    .. code-block:: python

        # Good
        meas_map = [[0, 1]]
        # Acquire a subset of [0, 1]
        sched = pulse.Schedule()
        sched = sched.append(pulse.Acquire(10, acq_q0))

        # Acquire 0 and 1 together (same start time, same duration)
        sched = pulse.Schedule()
        sched = sched.append(pulse.Acquire(10, acq_q0))
        sched = sched.append(pulse.Acquire(10, acq_q1))

        # Acquire 0 and 1 disjointly
        sched = pulse.Schedule()
        sched = sched.append(pulse.Acquire(10, acq_q0))
        sched = sched.append(pulse.Acquire(10, acq_q1)) << 10

        # Acquisitions overlap, but 0 and 1 aren't in the same measurement
        # grouping
        meas_map = [[0], [1]]
        sched = pulse.Schedule()
        sched = sched.append(pulse.Acquire(10, acq_q0))
        sched = sched.append(pulse.Acquire(10, acq_q1)) << 1

        # Bad: 0 and 1 are in the same grouping, but acquisitions
        # partially overlap
        meas_map = [[0, 1]]
        sched = pulse.Schedule()
        sched = sched.append(pulse.Acquire(10, acq_q0))
        sched = sched.append(pulse.Acquire(10, acq_q1)) << 1

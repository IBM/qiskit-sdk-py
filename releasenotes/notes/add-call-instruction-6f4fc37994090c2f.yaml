---
deprecations:
  - |
    Following builder functions are deprecated.

      - :py:func:`~qiskit.pulse.call_circuit`
      - :py:func:`~qiskit.pulse.call_schedule`

    These functions are unified into :py:func:`~qiskit.pulse.call`.
    Calling :py:meth:`Schedule.flatten` method is also deprecated.
    Please use :py:func:`~qiskit.pulse.transforms.flatten` instead.

features:
  - |
    Pulse :py:class:`~qiskit.pulse.instructions.Call` instruction is added.
    This instruction is a compiler directive and not exposed to end users.
    The logic of the pulse builder is updated to store a call instruction when py:func:`pulse.call`
    function is used with ``target``, i.e. ``QuantumCircuit`` or ``Schedule``.
    Now this function saves the ``target`` as a call instruction rather than simply appending
    its schedule to the context. This representation explicitly describes
    the ``target`` is defined outside of the current scope, or as a subroutine.
    No further schedule transforms are applied between subroutines and stored programs
    are kept as-is. For example,

    .. code-block:: python

      xcirc = QuantumCircuit(1)
      xcirc.x(0)

      with pulse.build(backend) as sched:
        pulse.call(xcirc)
        pulse.call(xcirc)

    the ``xcirc`` is called as an individual subroutine, thus these programs are not
    merged within the builder context through consecutive x gates forms an identity.
    The :py:class:`~qiskit.pulse.instructions.Call` instruction helps the Qiskit compiler
    to produce a cleaner and more reusable program representation. It does not affect the underlying
    program execution.

---
features:
  - |
    Adds ``IdentityOp`` operator class that represents a symbolic identity
    operator. This can be used to initialize a scalar multiple of an identity
    on arbitrary dimension subsystems and it will be implicitly converted to
    other BaseOperator subclasses (such as an ``Operator`` or ``QuantumChannel``)
    when it is composed with, or added too, them.

    Example

    .. code-block::

        from qiskit.quantum_info import IdentityOp, Operator

        X = Operator.from_label('X')
        Z = Operator.from_label('Z')

        init = IdentityOperator(2 ** 3)  # 3-qubit identity
        op = init @ X([0]) @ Z([1]) @ X([2])  # Op XZX
  - |
    Adds ``ZeroOp`` operator class that represents a symbolic empty (zero)
    operator. This can be used to initialize a symbolic zero operator on arbitrary
    dimension subsystems (similar to Numpy.zeros) and will be implicity converted
    to other BaseOperator subclasses (such as an ``Operator`` or ``QuantumChannel``)
    when it is added or subtracted from them.

    Example

    .. code-block::

        from qiskit.quantum_info import ZeroOp

        # Create a rectangular ZeroOp
        input_dims = (2, 2)
        output_dims = (2, 2, 2)
        zero = ZeroOperator(input_dims=input_dims,
                            output_dims=output_dims)

    If it is composed or tensored with other operator objects, the result will
    always be another ``ZeroOp``.

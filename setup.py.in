# -*- coding: utf-8 -*-

# Copyright 2017 IBM RESEARCH. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# =============================================================================

import os
import platform

from distutils import log
from distutils.dir_util import mkpath
from distutils.file_util import copy_file
from multiprocessing import cpu_count
from subprocess import call

from setuptools import setup, Extension
from setuptools.command.build_ext import build_ext

requirements = [
    "IBMQuantumExperience>=1.8.26",
    "matplotlib>=2.1,<2.2",
    "networkx>=1.11,<2.1",
    "numpy>=1.13,<1.15",
    "ply==3.10",
    "scipy>=0.19,<1.1",
    "sympy>=1.0"
]


packages = ["qiskit",
            "qiskit.backends",
            "qiskit.dagcircuit",
            "qiskit.extensions",
            "qiskit.extensions.standard",
            "qiskit.extensions.qiskit_simulator",
            "qiskit.extensions.quantum_initializer",
            "qiskit.libs",
            "qiskit.mapper",
            "qiskit.qasm",
            "qiskit.qasm._node",
            "qiskit.unroll",
            "qiskit.tools",
            "qiskit.tools.apps",
            "qiskit.tools.qcvv",
            "qiskit.tools.qi"]


class CMakeError(Exception):
    pass


class CMakeWrapper(object):
    """
    Utility class for invoking `cmake` commands.

    Note: stdout is silenced by pip if the full setup.py invocation is
        successful, unless using '-v' - hence the warnings might not be
        displayed to the end user.
    """
    def __init__(self, cmake_dir='out'):
        self.cmake_dir = os.path.abspath(cmake_dir)
        self.cmd_make_extra_args = []
        self.create_cmake_dir()

    def create_cmake_dir(self):
        """
        Create the out of source cmake directory, setting the flags passed to
        cmake based on the platform and available features.

        Raises:
            CMakeError: if `cmake` could not be found, or its invocation
                resulted in an error.
        """
        # Check for supported platforms
        supported_platforms = ['Linux', 'Darwin', 'Windows']
        current_platform = platform.system()
        if current_platform not in supported_platforms:
            log.warning(
                'The QISKit extensions are only supported currently under the '
                'following platforms: {}'.format(supported_platforms))
            raise CMakeError('Unsupported platform')

        # Prepare the flags for the `cmake` command.
        cmd_cmake = ['cmake', '-vvv']
        if 'USER_LIB_PATH' in os.environ:
            cmd_cmake.append('-DUSER_LIB_PATH={}'.format(
                os.environ['USER_LIB_PATH']))
        if current_platform == 'Windows':
            # We only support MinGW so far
            cmd_cmake.append("-GMinGW Makefiles")
        cmd_cmake.append(os.path.abspath('.'))

        # Prepare the flags for the `make` commands.
        try:
            self.cmd_make_extra_args.append('-j%d' % cpu_count())
        except NotImplementedError:
            log.warning('Unable to determine number of CPUs. Using single '
                        'threaded make.')

        # Run cmake for creating the out of source folder.
        try:
            log.info('Creating the cmake out of source directory')
            mkpath(self.cmake_dir)
            call(cmd_cmake, cwd=self.cmake_dir)
        except Exception as e:
            log.error('The initial cmake command could not be executed. '
                      'Please check that cmake and the dependencies for the '
                      'extensions are installed: %s' % str(e))
            raise CMakeError(str(e))

    def run_make_target(self, target, args=None):
        """
        Run a `make` target inside the cmake directory.
        Args:
            target (str): name of the target to run.
            args (None or list): list of extra parameters for the target.

        Raises:
            CMakeError: if the make target returned an error.
        """
        args = args or []
        cmd_make = ['make', target] + args + self.cmd_make_extra_args

        try:
            log.info('Building cmake target "%s"' % target)
            call(cmd_make, cwd=self.cmake_dir)
        except Exception as e:
            log.error('Unable to build target "%s": %s' % (target,
                                                           str(e)))
            raise CMakeError(str(e))


class BuildCMakeExt(build_ext):
    def run(self):
        """Build extensions in build directory, then copy if --inplace"""
        # Copy the files generated by cmake to the build directory, mimicking
        # the default compilation.

        # Try to initialize cmake.
        self.cmake_path = os.path.join(self.build_temp, 'out')
        try:
            cmake_wrapper = CMakeWrapper(self.cmake_path)
        except CMakeError:
            return

        for ext in self.extensions:
            try:
                source_so = ext.sources[0]
                sources_other = ext.sources[1:]

                # Get the names and paths used.
                fullname = self.get_ext_fullname(ext.name)
                shortname = fullname.split('.')[-1]
                filename = self.get_ext_filename(fullname)
                extension_dir = os.path.dirname(os.path.join(self.build_lib,
                                                             filename))

                # Execute cmake to invoke the target
                cmake_wrapper.run_make_target(shortname)

                # Copy the files to the temporary build directory. The first
                # .so file is renamed to the  platform specific name, and the
                # rest are copied as-is.
                self.mkpath(extension_dir)
                copy_file(os.path.join(self.cmake_path, source_so),
                          os.path.join(extension_dir, os.path.basename(filename)))
                for other_file in sources_other:
                    copy_file(os.path.join(self.cmake_path, other_file),
                              os.path.join(extension_dir,
                                           os.path.basename(other_file)))
            except CMakeError as e:
                # TODO: cleanup in case a single extension fails to build
                log.warning('Error building "%s": %s' % (ext.name, str(e)))

        old_inplace, self.inplace = self.inplace, 0

        self.inplace = old_inplace
        if old_inplace:
            self.copy_extensions_to_source()


setup(
    name="qiskit",
    version="0.5.0",
    description="Software for developing quantum computing programs",
    long_description="""QISKit is a software development kit for writing
        quantum computing experiments, programs, and applications. Works with
        Python 3.5 and 3.6""",
    url="https://github.com/QISKit/qiskit-sdk-py",
    author="QISKit Development Team",
    author_email="qiskit@us.ibm.com",
    license="Apache 2.0",
    classifiers=[
        "Environment :: Console",
        "License :: OSI Approved :: Apache Software License",
        "Intended Audience :: Developers",
        "Intended Audience :: Science/Research",
        "Operating System :: Microsoft :: Windows",
        "Operating System :: MacOS",
        "Operating System :: POSIX :: Linux",
        "Programming Language :: Python :: 3.5",
        "Programming Language :: Python :: 3.6",
        "Topic :: Scientific/Engineering",
    ],
    keywords="qiskit sdk quantum",
    packages=packages,
    install_requires=requirements,
    include_package_data=True,
    python_requires=">=3.5",
    extras_require={
        'ProjectQ':  ["projectq>=0.3.6"],
    },
    cmdclass={
        "build_ext": BuildCMakeExt,
    },
    ext_modules=[Extension('qiskit.libs._qiskit_simulator_swig',
                           sources=['swig/_qiskit_simulator_swig.so',
                                    'swig/qiskit_simulator_swig.py'])],
)
